{"pageProps":{"member":{"id":"h13i32maru","nickname":"h13i32maru","realName":"Ryo Maruyama","bio":"JasperとかTrickleとか作ってる","avatarSrc":"/avatars/h13i32maru.jpg","sources":["https://blog.h13i32maru.jp/feed"],"twitterUsername":"h13i32maru","githubUsername":"h13i32maru","websiteUrl":"https://h13i32maru.jp"},"postItems":[{"title":"スクラムマスターは「スクラムチーム改善」のプロダクトオーナー","contentSnippet":"今年からスクラムマスター(SM)を始めた。1ヶ月ほどたったので、「やってみて気づいたこと」や「具体的に取り組んだこと」を残しておく。ただし、僕はスクラムマスター研修は受けてない野良SM（？）である。なので、間違いとか超基本すぎることなどがあるかもしれない。やってみて気づいたことスクラムマスターの仕事は「スクラムチームを改善する」ことに尽きると思った。その観点で次の事が特に大事だと気づいた。「スクラムチームの改善」は「プロダクトの改善」と同じスクラムチームを一種のプロダクトだと考えて、課題見つける→PBIにする→解決するSMはスクラムチームの改善において、いわゆるプロダクトオーナー的な役割である司会・議事録係・ミーティング調整役ではないまずはとにかく透明性をあげるプロダクトオーナー(PO)、BizDev、エンジニア、デザイナー、ドメインエキスパート、SM、etcのやってることや頭の中を見える化するコミュニケーション量や回数を増やすことは見える化に重要コミュニケーションが生まれやすい仕組みをどんどん試してみるわからないことは率先して質問しまくってチーム内のコミュニケーション潤滑油にする改善結果はスクラムイベントに組み込む改善したものは仕組み化して継続していきたいそのために可能な限りスクラムイベントに組み込んで、自然と継続できる形にするとよい取り組んだこと色々やったけど、特に良かったなと感じたものをざっと書き出しておく。スクラムガイドを読み直したSMになったときに何をすれば良いのかわからなかったのでスクラムガイドを読み直した読み直したけど、やっぱり抽象的でよくわからなかったけど、↓を読んでスクラムチーム自体の改善をするとよさそうかな〜とぼんやり思ったチームにKeep/Changeアンケートを投げた具体的にどんな改善をすればいいのかわからなかったので、アンケートを投げてインプットをもらったスクラム改善を見える化したカンバンを作成して、アンケート内容をPBIとして積んでいった毎週一人リファインとプランニングをしているスクラム改善の進め方を考えた全部一気には無理なので、1スプリント(1week)で1改善を目安にすすめることにした当初は初速を重視して、改善の実務はSM単独でやることにしてみたやりたいPBIをみんなで話した積んだPBIを元にメンバー数名と各自がやりたいPBIを話した結構バラけたので、参考にしつつまずは何に取り組むかをSMとして意思決定したプロダクトオーナーとチームOKRについてめっちゃ話したOKRの背景、達成のための登り方、現在の状況、エピック、スプリントゴール、将来の展望などなど1on1で話した後、チームメンバー全員呼んで1onNでも話したこのチームOKRについて話す会は毎週行うようにしたマーケットの調査や検証のタスクもPBIにするようにしたこういうタスクはPOやBizDevがやってるけど、チームへの共有にばらつきがあったPBIにすることで見える化され、チームへの共有はもちろん、リファインメントやプランニングでも扱えるようになって透明性がめっちゃあがったスクラム改善で消化したPBIをチームの定期MTGで共有どんな改善をしたか、次どんな改善をしたいかを共有して、インストールとフィードバックを得るリファインメントのチートシート作成リファインメント時に重要な点をチートシートにして、認識揃えたり議論するのを忘れないようにするためまだブラッシュアップは必要そうリファインメントではWhy・Whatに集中して、Howはあまり話さないようにするこれは僕がやったというか以前からPOが意識してたけど、それをより意識するようにしていった次にやりたいことSMとしての動きについてチームメンバーからのフィードバックは好評だった。一方で次に改善すべき点も色々見えてきたので、それを試していきたい。具体的なHowの検討をより良い感じにしたい効果検証・学習・スプリントレビューなどの検査周りを良い感じにしたい可能な限りチームメンバー全員でSM業務をやれるようにしたい理由: 一人で改善するより全員で改善するほうが、視点や解決策などが多様になって強くなるはずだし、自己組織化にも有益そうだからスクラムイベントの司会や議事録業務をチーム内で回すスクラムチーム改善をチームメンバーも消化できるようにするそのためにはスクラムチーム改善の型を作る必要がありそうスクラムチーム改善もスクラムで回せるようにして、SMがそのPOをするようなイメージSMの仕事というような内容を書いて下書きを社内に公開したら、他のスクラム経験者からめっちゃ良いフィードバックをもらったこのフィードバックを受ける前は「SMの仕事はチーム改善」と思っていたけど、真の仕事は「チームの自己組織化（自己管理型）の推進」というのに気付かされた。自己組織化が重要そうというのはふんわり思っていたけど明確に意識はできてなかった。この真の仕事をするために、具体的な手法として次のようなステップを経ていきそうだと思った。ステップ1: スクラムイベントを運営する人ステップ2: チーム改善する人ステップ3: チームにチーム改善を浸透させる人今回僕がやったのはステップ2で、この記事もそこの即した内容になってる。そして「次にやりたいこと」で書いたのはステップ3をなんとなく意識していた感じだったんだなと。こういうフィードバックもらえるのめちゃ助かる。感謝。色々新しい発見があったので、SMに挑戦してみてよかった。スクラムやSMについて雑談するMeetyも作ってみたので興味有る方はぜひ！meety.net丸山@h13i32maru at  Ubie Discovery","link":"https://blog.h13i32maru.jp/entry/2022/02/07/093436","isoDate":"2022-02-07T00:34:35.000Z","dateMiliSeconds":1644194075000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"物理雑談とリモート雑談のゆくえ","contentSnippet":"TL;DR本記事は「2つの仮説をもとにした雑談の考察」仮説: 物理雑談とリモート雑談は対立関係ではなく相互補完関係仮説: 物理ワークとは違う、リモートワークならではの雑談が生まれやすい仕組みが必要まとめ: リモート雑談はデジタルであることのメリットを活かすようになっていきそう「Gather」良いCOVID-19の影響で仕事はリモートワークになり、そしてほぼ同時期に子供が産まれ子育てを始めた。COVID-19はしんどいけど、一方でリモートワークはめちゃくちゃありがたい。リモートじゃなかったら仕事と育児家事を両立するのは無理だったと思う。もう物理100%の以前の勤務スタイルには戻れない。もし戻ったら確実に生産性がめちゃくちゃ落ちる。なので、今後もリモートワークで働きたい。技術の進歩であったり、会社での取り組みであったりでリモートワークでもかなり普通に働けている（みんなが一斉にリモートワークになったというのもすごく大きい）。ただし、「（仕事に関係する）雑談」に関しては物理のほうがいいという話をよく聞く。自分も半分は同意するんだけど、半分は違和感がある。違和感はだいたいこんな感じ。物理雑談 vs リモート雑談なんだっけ？これまで物理の雑談だけだったので、リモート雑談の最適化ができてないだけでは？リモートでの雑談にもいいところあるし、楽しいものもあるよ？物理雑談とリモート雑談は補完関係そこで、一つの仮説をたててみた。仮説: 物理雑談とリモート雑談は対立関係ではなく、補完関係にある。例えば「外食をする」と「食事のデリバリーを頼む」は利用者側にとっては対立関係ではなく補完関係にあると思う。前者はお店の雰囲気なども含めたトータルの美味しさ、後者は好きなものを手軽に食べれる美味しさ。他にも「音楽のライブ」と「音楽のサブスク」も補完関係にありそう。こんな感じで物理雑談とリモート雑談も補完関係にあるのではないかと。ただし、現状のリモート雑談は物理雑談を補完できてないので、対立関係のように捉えられてしまっていると。もしくはリモート雑談で物理雑談を再現しようとしてしまっている（でも再現できなくて、物理がいいねとなる）。雑談のスコープ仮説を掘り下げる前に、今回扱う雑談のスコープは次のようなものとしておく。リモートワークが中心の会社での雑談とする今回扱う雑談は「仕事に関係する話を複数人の同僚でカジュアルに行うもので、ミーティングとは違いインフォーマルなもの」仕事に関係ない趣味やプライベートに関する雑談はスコープ外この雑談によって得たいものは「参加者の情報同期とコラボレーション」物理雑談は実際に対面でする雑談、リモート雑談はインターネットを使ってする雑談リモート雑談も同期的に行うものに限定する。例えばSlackなどのチャットツールによる雑談は非同期なので今回は除外するZoomやGoogle Meetでの雑談を想定している雑談の特性とマルバツ表仮説の通り補完関係にあるとするなら、次のことを思考してみるのがよさそうだ。物理雑談の強いところ弱いところを把握するリモート雑談でその弱いところを補完して、強いところは物理に任せる仕組みを考えるこの前提の上で、雑談の特性とマルバツ表を考えてみた。 特性  物理雑談  リモート雑談(現状)  参加可能な人数  ◯  △  途中参加のしやすさ  ◯  △  雑談しているのをすぐに発見できるか  △  △  雑談の内容を後から知れるか  ✕  ✕  五感を含めた情報量や熱量の多さ  ◎  △  開催の手軽さ  ✕  ◎ ※これは5分ぐらいで考えた粗いものである。他にも特性はありそうだけど、そこはあまり精緻化せずこれでいってみる。あくまで仮説の方向性がありなのかを思考実験するためのものであるため。リモート雑談で物理雑談の何を補完するかこのマルバツ表によるとリモート雑談で物理雑談を補完するには、「雑談をすぐに発見できるか」と「雑談の内容を後から知れるか」について最適化が必要である。これはリモート雑談がデジタルであることのメリットを活かせそうである。とりあえず思いついたのは次のような方法だ。どこかでリモート雑談が開始されると、Slackのチャンネルに通知され、発見しやすくするZoomやMeetのURLも一緒にあればすぐに参加できそう常になのか、任意なのかは論点ありそうリモート雑談の録画・文字起こし・要約・カテゴリが配信され、検索可能となっている雑談内容が検索可能になることで、なんとなく不安感を持つ人もいるかも知れないそれと、技術的難易度が高そうか？一方で、すでに物理雑談で◯や◎となっているものは、リモート雑談で最適化は必須ではなさそう（してもよい）。また、「開催の手軽さ」は物理雑談✕、リモート雑談◎なのでこれは維持したほうがよさそう。これまでは物理雑談とリモート雑談が相互補完にあるという仮説を元に色々考えてきたが、次は視点を少し変えてみる。リモートワークで雑談が生まれやすい仕組みが必要実際のオフィスの場合、「会話が生まれやすいような導線や部屋などを意識したレイアウト設計をする」というのを聞いたことがある。同じように物理ワークとは違う、リモートワークならではの雑談が生まれやすい仕組みを設計する必要があると考えてみる。ではどんな仕組みを設計すればよいのか？物理（オフィス）ワークからリモートワークへ変化したことによる影響を元に考えてみることにする。今思いつくのは次の2点だ。相手の仕事の雰囲気が見えないスキマ時間を効率的に使ってしまう相手の仕事の雰囲気が見えないリモートワークになったことで、雑談のハードルがあがったという声をよく聞く。これは「相手の仕事の雰囲気が見えないので話しかけて良いのかどうか分からない」というものだろう。相手が集中して作業をしてるのか、それとも話しかけてもよさそうな感じなのか。もしくは他の誰かと話しているのか、離席しているのかとか。これは物理ワークだったときは相手が今どういう雰囲気で仕事をしているかは見ればなんとなくわかったので、それに応じて話しかけるかどうかを判断できた。リモートワークでもとりあえずSlackなどで話しかけてみて、レスがあれば雑談する。レスがなかったら集中してるんだなと思って諦める。というのをすることもできる。できるが、僕はレスがないとちょっとさみしいなと感じてしまうので苦手である。スキマ時間を効率的に使ってしまうミーティングとミーティングの合間、タスクが切りよく終わった瞬間など、物理ワークならこういう瞬間は絶好の雑談タイミングである。しかしリモートワークだとそのタイミングに細かい雑務を片付けたり、Slackを巡回したり、外の空気を吸いに行くなどをしがちである。雑談を誰かに振るというのをしない。これは前述の「相手の仕事の雰囲気が見えない」というのもあるだろうし、リモートワークだと何故か（？）スキマ時間を効率に使わねばと思ってしまう。理由はうまく言語化できないが。見える化 and/or 定期開催これら2つの問題を解決する仕組みとしては、例えば次のような方法がありそうだ。仕事の雰囲気を見える化するSlackのステータスを都度変更するというので可能そうだけど、もうちょっといい方法がほしいように思う雑談を定期開催にする毎週や毎日の決まった時間に雑談を開催するこれは割と行っているところも多そうで、前職では帰りの会というのを実施していたリモートワークで雑談が生まれやすい仕組みは他にも色々必要かもしれない。が、そういう仕組が必要そうというのは方向性としては正しそうな気がする。「Gather」良いという感じで、雑談について頭にあったものを吐き出してみた。ちょうど会社(Ubie Discovery)で物理とリモートでの雑談*1について話題になっていたのもあるため。で、これを書いてる間に社内ではGatherというサービスがまたたく間（まじで1, 2日で)に浸透して、Gatherでするリモート雑談めっちゃ良いじゃんとなった。Gatherはサービスの作り込みが結構されているのもあるが、前述した物理雑談を補う点や、リモートワークで雑談が生まれやすくなる仕組みが作られている。雑談をすぐに発見できるか？人が会話している、集まっている様子が可視化されているのですぐに発見できるただし、Gatherの画面を見ていないと雑談には気づけ無いこれはまあ物理雑談もそういうものだと思うので、現状でも十分だと思う相手の仕事の雰囲気が見えない静かにするモード(Quiet Mode)であったり、PCデスクの前に座るなどで集中状態を可視化できる逆に談話スペースにいることで雑談可能を示せるちなみに通常のミーティングもGatherで行われつつあるので、他チームのミーティングにふらっと参加してコラボするというのも発生している。他にも自分のデスクトップ画面を共有して、作業風景を垂れ流しながら仕事をしてる人もいたりする。要はデジタルであることのメリットを最大限活用して、物理では難しかったコミュニケーションの体験を作れるのである。だからといって、Gatherによるリモート雑談だけでよくて物理雑談は不要とはならなさそうだ。あくまでも相互補完という感じがしている。一方で、Gather単体では解決が無理そうなものもある。雑談の内容を後から知れるか？録画機能は他のアプリを使って頑張ってねという感じぽいスキマ時間を効率的に使ってしまう個人的にはこれは意識的に雑談時間を設けたり、定期開催するので良いかなと思っているリモートワーク中心になり、（仕事に関係する）雑談に悩みを持っているなら、Gatherは試してみるのはおすすめである。ゆくえというわけで、穴だらけの論理展開だったが、これまでの考えをまとめるとリモートワーク下における物理雑談とリモート雑談のゆくえは次のようになると思った。物理雑談熱量や雰囲気といった言語化しづらいものも含めた体験を必要とするときに行う例えば期初やプロジェクト発足時のキックオフだったりオフサイトみたいなものリモートワーク中心の会社では手軽な開催はやや難しいので、頻度や内容の工夫もあるとよさそうリモート雑談デジタルで行うことのメリットを活かし、物理では実現が難しい体験を模索して、物理と相互補完する例えばちょっとしたアイデアについて話したい、隣のチームの雑談やミーティングにふらっと参加するなど手軽に開催できるので、思い立ったらすぐに開始するぐらい俊敏にやるこのあたりの話は論文があったり、リモートワークを何年もやってる会社が知見をまとめていたりしそう。誰かがいい感じの記事を書いてくれるのに期待。2022年は雑談をもっと雑にやっていきたい。丸山@h13i32maru*1:社内では「ただ話す」と呼ばれていて、少しニュアンスは違うが","link":"https://blog.h13i32maru.jp/entry/2022/01/24/090721","isoDate":"2022-01-24T00:07:21.000Z","dateMiliSeconds":1642982841000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"社の化け物メンバーを勝手に紹介する","contentSnippet":"社のみんなが一年の振り返りブログを書いてて、僕も何か書くか〜という気持ちになった。が、あと2,3ヶ月でUbie Discovery(以下Ubie)に入社して一年たつので振り返りはその時にしようと思う。というわけで（？）、今回はこの一年で遭遇した社の化け物メンバー(=めちゃくちゃすごい人)を勝手に紹介する自己満足記事を書くことにした（ブログはいつも自己満足だよな？）。ちなみにここに記載したのは直接一緒のチームで働いた人を中心に書いた。社には他にも化け物がたくさんいる。@sys1yagi @maguhiro @shikajiro @NishimuuuuR @smurakos @takayamag 直接一緒に働いたことはないけど他にも@sonopy_uさん(組織開発の化け物)、@itkqさん(SREと事業ブリッジ*1の化け物)、@yohei_kikutaさん(クソリプ・雑コラの化け物)とかもいる。いやー、本当に化け物ばかりでやばい。こうやってすごい人のことを紹介すると自分もすごい人になれる気もするが、そんなことはないので僕は人間としてぼちぼちやっていきます。*1:SREのポジションから事業にめちゃ貢献したり事業にSRE観点を注入してるというの言語化したかった","link":"https://blog.h13i32maru.jp/entry/2021/12/31/193708","isoDate":"2021-12-31T10:37:08.000Z","dateMiliSeconds":1640947028000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"今更ながらNext.jsに入門した","contentSnippet":"こんにちは丸山@h13i32maruです。すごい今更ながらNext.jsに入門したので感想をメモしておこうと思います。入門資料@hokacchaさんがクックパッド社のインターンシップ用に公開している動画を見て入門しました。要点がコンパクトにまとまってるので、これを見れば基本は理解できるようになってよかったです。SSGCodeLunch.fmのサイトをNext.jsのSSGで作り直しました。もともとreact-dom/serverのrenderToString()を使ってなんちゃってSSGを自前で実装していたので、移行は簡単でした。getStaticPropsやgetStaticPathsの仕組みはうまいこと考えられてていいな〜と思いました。それと、データを特に持っていない本当の静的サイトでもNext.js使ってSSGで作るのは良さそうと思いました。サイト内のパーツをReactコンポーネント化できるので。TypeScript連携特に何も考えず.tsxでファイルを作ってNext.jsを起動すれば、TypeScriptの使用を検知してtsconfig.jsonを吐き出してくれて何も設定いらずに使用できました。すごい快適。ただtsconfig.jsonのstrictプロパティはtrueに変更したほうがよさそう。あと、公式ドキュメントにもTypeScriptセクションがあって、TypeScriptでの書き方（主に型の付け方）がまとまっていて便利でした。SSR自分の家庭内で使う「子供の献立作成アプリ」を作るのにSSRを使ってみました。CSRでも良かったんですが、近々別のサービスでSSRを使う予定だったので。SSGと同じ要領でgetServerSidePropsを実装すればSSRできるのはすごい簡単でした。Next.jsのSSGやSSRの抽象化の仕組みは仕様がシンプルなのに、やれることに制限がなくていい設計だなぁと思いました。SSR/SSGをする他のフレームワークを使った事ないので他と比較してどうかはわかりませんが。サーバ/クライアントSSRで実装していると、サーバ側で動くコードとクライアント側で動くコードが頭の中で混乱しました。pages/配下から呼び出されるコードはSSRするときにサーバ側でも動くし、クライアント側でも動く（ハイドレーションされる）というのは理解はできてても難しいですね。このあたりは書いていくうちに慣れては来ましたが、たまに「あれ？なんでここエラーになるんだっけ？？」みたいなのがあって「あ、これはサーバサイドでしか動かないコードだったわ」みたいなのがあります。ディレクトリ構成Next.jsではpages/とpages/apiしかディレクトリの規則がないので、自由に構成することができます。そこでどんな構成がいいのかがちゃがちゃして今のところは以下の構成になってます。./src├── client│   ├── Repo│   └── Component│       ├── Fragment│       ├── Page│       └── View├── pages│   └── api├── server│   ├── ServerRepo│   └── Route└── typepages/にはコンポーネントの実態はおかずに、getServerSidePropsの実装に集中するようにしています。// ----------------------------// src/pages/FooPage.tsx// ----------------------------export default function page(props: FooPageProps) {  return <FooPage {...props} />;}export const getServerSideProps: GetServerSideProps<FooPageProps> = async (context) => {  return ...;}// ----------------------------// src/client/Component/FooPage.tsx// ----------------------------export type FooPageProps = {...};export const FooPage: React.FC<FooPageProps> = (props) => {  return ...;}src/clientとsrc/serverに分けたのはなかなか分かりやすくて良いんですが、SSRをしている都合上src/client/Component配下のコードはSSR時にも実行されます。もうちょっとしっくりくるディレクトリ構成がほしいな〜と思いました。API Routeものすごい素朴な感じですね。HTTPリクエストメソッドに応じたルーティング的なものもありません。ここはもうちょっと仕組みがデフォルトでほしいところです。でもexpress.js風なシンプルさは安心感がありました。next/linkパラメータ定義をファイル名に埋め込んだルーティングは最初ちょっとびっくりしましたが、すぐに慣れました。そういう規約のおかげで、画面遷移もnext/linkを使って簡単に書けるのがよかったです。ただ、遷移元で遷移先のパスを愚直に文字列で組み立てる方法だと、パスが変わったときやパラメータ定義を変えたときなどに困りますね。なので遷移先でURLを組み立てる関数を公開するとかの工夫をしたほうがよさそうだなと思いました。あと、SSRだと画面遷移時にURLは変わりますが、ブラウザのローディングバーなどが動きません。これはHistory APIを使ってるからだと思います。その結果、画面遷移が体感的に遅く感じてしまいます。なので、pages/_app.tsxのなかでrouter.eventsを使い、画面遷移時に独自のローディングバーを表示するようにしました。// src/pages/_app.tsxexport default function MyApp({ Component, pageProps }: AppProps) {  const [loading, setLoading] = useState(false);  const router = useRouter();  useEffect(() => {    router.events.on('routeChangeStart', () => {      setLoading(true);    });    router.events.on('routeChangeComplete', () => {      setLoading(false);    });  }, []);  return (    <>      <Component {...pageProps} />      <Loading enable={loading}/>    </>  );VercelVercelめっちゃ便利。デプロイが超簡単でした。Next.js使った簡単なアプリならこれで十分です。ただし、問題はデータストレージです。今回作ったアプリは家庭内で使うだけのアプリなので、ファイルにJSONをただ書き出せれば良かったんですが、Vercelではファイルアクセスはできません（そもそもサーバレス）。かといって、RDBMSをどこかにたてて、そこにVercelからつなぐようにするのも面倒そうだなと思ったので、今回はGitHubのgistにデータを保存するようにしました。gistはGitHubのアクセストークンと@octokit/coreがあれば簡単に読み書きできます。まあレイテンシーとか処理時間とかは遅いですが。あとは毎回JSONをフルで読み書きする必要があるので、同時アクセスでぶっ壊れます。なので雑な排他制御を実装してお茶を濁しました。Vercelにデータストレージもついていればまじで完璧なんだけどな〜。低スペックなRDBつけてくれないかな。sqliteベースでもいいので。その他.envが何もせず使えて便利でした。しかもVercelには環境変数を設定する機能もちゃんとついてて快適。styled-componentsを使ったんですが、ちょっとだけ追加設定が必要でした。https://github.com/vercel/next.js/tree/master/examples/with-styled-componentsreact-beautiful-dndを使うのにも少しだけ設定が必要でした。https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/api/reset-server-context.mdまとめNext.jsはすごく快適に開発できてめちゃくちゃ良かったです。ReactなどのWebフロントエンドエコシステムとサーバサイドをいい感じに連携させるのは大変という課題をよく聞きます。Next.jsはその課題を、Webフロントエンド特にReactを開発の中心に持ってくることで解決しているんだなと思いました。ただ、React/TSが初めての人が独習していくのは大変そうだな〜と感じました。まあこれはNext.jsやWebフロントエンドに限った話ではないと思いますが。というわけで、久々に新しいツールにちゃんと入門して楽しかったです。現職のUbie Discoveryで、Nuxt.jsからNext.jsへ移行した話とかもあるので興味ある方は是非。","link":"https://blog.h13i32maru.jp/entry/2021/09/13/092340","isoDate":"2021-09-13T00:23:40.000Z","dateMiliSeconds":1631492620000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"Ubie Discoveryに入社して感じた「これまでとの違い」","contentSnippet":"@h13i32maruUbie Discoveryに入社して半年がたった。半年働いてみて、これまで働いてきた会社と比べて違うなと感じたことが結構ある。それらを忘れないように残しておこうと思う。ちなみに個人的に感じたことや解釈なので、ズレていることがあるかもしれないのであくまでも主観ということで。人ではなく仕組みやコトを管理組織運営に組み込まれた権限委譲徹底した目標設定と運用人事評価をしない意思決定人ではなく仕組みやコトを管理Ubie Discoveryではマネージャーと呼ばれる人はいないし部長などの役職もない。じゃあどうやって組織を運営しているかというと、そもそも「人や人の行動を管理（マネージ）する」という管理スタイルではない。Ubie Discoveryで管理しているものは「目標・目標達成の方法・様々な型（プロセスやフレームワークのこと）」などの仕組みやコトである。そして管理する対象が人ではないため、上司部下という関係は不要になる。更に面白いのが、仕組みやコトの管理は全社員がそれらを管理するというのを（理論上は）行える。これによって全社員に当事者意識や全社目線というものが生まれやすくなっていると思う。これは人が人を管理するというスタイルでは役職の階層構造が生まれるのでどうしても難しいことであり、仕組みやコトを管理するスタイルのメリットだと思う。一方で、人が人を管理することをしないので、「モチベーション維持」「成長やキャリアのサポート」などの個人的な事情については手薄になりがちである。そのためUbie Discoveryではそのあたりについて自分でなんとかできるタフさが求められるように思う。もちろん、相談にいけばみんな快くサポートしてくれる。組織運営に組み込まれた権限委譲これまで働いてきた会社でも権限移譲というのはあった。しかし、「どのような権限を・どれくらい移譲するか」というのは移譲する側によって濃淡があり、組織全体で統一されていなかったり、不透明だったりする。Ubie Discoveryでは、どのような権限をどのようなプロセスを経て移譲していくかが組織運営に明確に言語化されて組み込まれている。これは共同代表の二人から各チームへの権限移譲でも、各チームからさらに小さなチームへの権限移譲でも同じである。つまり権限移譲する側によって濃淡がなく、社内のどこでも統一された方法で運営される。このように権限委譲が浸透しているため、トップやマネージャーが全て意思決定するよりも、現場で課題に向き合ってる人々がスピード、質、多様な視点を持って意思決定できる。さらに権限移譲は人に移譲するのではなく、全社目標を階層構造に分解したときの、その目標（正確にはその目標を達成する役割）ごとに移譲される。この役割（≠役職）というのも統一的に決まっている。例えばチームに人をアサインする役割、親チームとの連携を行う役割、議論をファシリテートする役割などである。これにより権限と人の結びつきが緩和されて、流動性が生まれやすくなっている。例えば一般的に「部長」という役職を一旦人に与えてしまうと、さまざまな理由によりその人から部長という役職を剥がすことは難しい。しかしUbie Discoveryでは先月まではリードの役割にアサインされていた人が、次は全然別の役割をやるといのは日常的に起きている。とはいえ、これは仕組みだけの話だけではなく、各自のマインドによるところも大きいと感じている。余談だが、社内では「willがある仕事をやるのが一番パフォーマンスが出る」という原則のもと異動がすごく推奨されている。そして、実は権限移譲だけでなく組織運営自体が明確に言語化されている。というのもUbie Discoveryではホラクラシーという組織運営のフレームワークを採用しているからだ。ホラクラシーとはティール組織の具体的な実装である。ここで書いた権限移譲や役割、それを決めるプロセスなどはすべてホラクラシーにより規定されている。ここまで組織運営が明文化されて、実際にそのとおり運営されている組織というのはこれまで全く経験したことがなかったので非常に新鮮で良いなと思っている。一方でその組織運営になれるには時間と学習コストを要する。まだその仕組に慣れていないので「こういうときはどうするんだっけ？」というのがちょいちょい発生する。徹底した目標設定と運用「仕組みやコトの管理」「権限委譲」が組織の根幹にあるため、そのままでは各自が良いと思う方向にバラバラに進んでいき、組織力を発揮しづらくなってしまう。そこでUbie Discoveryでは目標設定と運用にめちゃくちゃ労力を割いている。まず目標設定についてだが、共同代表の二人がトップダウンの目標を準備する。それと同時に各チームもボトムアップの目標を準備する。そしてこれらの目標を共同代表と各チームの代表でアラインして全社目標とチーム目標を作っていく。この目標設定で面白いのが目標だけではなく、それを達成するための大枠の方法についてもセットで決めていくことである。社内ではそれを「目標の登り方」と表現しているが、いわゆる戦略のようなものだと思っている。このようにして全社目標とチーム目標を一旦決める。ちなみに個人目標は決めていない。一旦と表現したのはこの目標が発表された翌週にUbie Discoveryの全メンバーでそれらの目標について議論したり、不明点を質問したりというのを一日かけて行い、最後の調整をするからである。この目標の発表と最後の議論がすごい熱量で行われる。正直僕はこれまで働いてきた中で、目標の発表や議論についてここまで熱量高く行われるというのを体験したことなかった。そしてなんと、この目標設定は四半期ごとに行われる。ものすごい労力が必要だけど、事業環境はすごいスピードで変わっていくので少なくとも四半期ごとにする必要があるのだと思う。目標は設定するだけではなく、実際に運用してこそである。そこで、Ubie Discoveryでは毎週のWin Sessionというミーティングで各チームから目標について進捗や良かった点、問題点を共有している。これが毎回大いに盛り上がる。また月に一回、共同代表とチームが目標についてリファインしている。同じく月に一回、共同代表からUbie Discoveryの全メンバーに対して売上やプロダクトの導入数、今月のハイライトなどの共有がある。もちろん日々の開発中にもこれらの目標は頻繁に参照される。そしてこのような運用を通して、目標は期中にも変わっていくことがある。というのもこれは事業環境の変化、不確実性が減ったり、新たに学習したことなどにより、より良い目標が見えてくるからだ。ここまで目標設定と運用に力を入れており、社員全員がその目標に対してすごい熱量を持っていて、それを起点にすべての物事が動いているというのはこれまで経験したことがなかった。なので、最初はめちゃくちゃビックリした。一方で、この目標とその登り方がだいぶコンテキストが高い内容になっている。これは四半期もしくはそれ以上のスピードで目標や登り方が変わっていくので、その字面だけを見てもだめでちゃんと各事業の状況を理解できている必要がある。なので入社当初は日本語は読めるけど内容が全然わからんという感じだったので、同僚に解説を何度もお願いしたりした。というか今でも自分が所属するチーム以外の目標や登り方は完全に理解できているかというと怪しい。ちなみにUbie Discoveryでは目標のフレームワークとしてOKRを採用している。人事評価をしない意思決定Ubie Discoveryでは人事評価をしないということになっている。人事評価が無いのではなく、しないという意思決定をしているのだ。なぜそのような意思決定をしているかというと、「 事業の不確実性が高い状況では各々の事業貢献を正確に把握できないため」「自分をよく見せようという政治的な動きを排除するため」「人事評価にはコストがかかるので、そこにコストをかけるより事業を進めるほうがRoIがよいため」などの理由がある。詳しくはUbie Discoveryのメンバーが書いた以下の記事を参照してほしい。報酬設計などについても書かれている。この人事評価が無いというのは個人的には非常に快適である。これまで人事評価をする・されるの両方を経験しているが、時間も体力も精神力もかなりコストがかかる。そしてその上で正解が無い。この難しい問題から開放されて、事業やプロダクトに集中できるというのはかなりのメリットである。人事評価はなくても事業をすすめる上での各自へのフィードバックというものは存在している。フィードバックを欲しいと思った人がフィードバックをもらいたいと思う人を指名して、フィードバックを書いてもらうというものだ。これはいつでも誰でも実行することができる。僕も何度か指名してフィードバックをもらったことがある。フィードバックをもらうのは気軽な一方で、フィードバックを書くときは僕は苦労している。僕は前職でマネージャーをしていたときがあるので人事評価の際はメンバーにフィードバックを書くこともやっていたのだけど、Ubieでフィードバックを書くときはどうしてもその時と比べると質が落ちているように感じる。マネージャーだったときはしっかりメンバーの業務を見たり、1on1で話を聞いたりなどしていたため、それに基づいてフィードバックを書けていたと思う。また人事評価もあったのでいわゆるグレードと呼ばれるようなものがあり、そこに「このグレードならこういう成果や能力を持っている」と記載があるため、それと比較してフィードバックをすることができる。Ubieではそういうマネージャー業やグレードというものは一切ないのでフィードバックの質が落ちるのかなと思っている。ただ、じゃあコストをかけようというのは「人事評価をしない」という意思決定に対して本末転倒である。この点についてはなにかいい方法がないかなとたまに考えたりしているが、今の所あまりよい仮説をたてられていない。という感じで割と独特な組織なので、人によっては好き嫌いや合う合わないがある。そのため「採用」についてもこれまでとの違いを感じることが多い。他にも「日々の開発」「エンジニアリング」などについても違いを感じたものがあるのだけど、それらは今度書くことにする。もしこれを読んでUbie Discoveryに興味を持った人は以下を参照してほしい。Ubie Discoveryの紹介資料Ubie DiscoveryのカルチャーガイドUbie DiscoveryメンバーのMeetyそれと、Ubie Discoveryに転職〜入社1ヶ月までの話も書いてるので興味があれば参照してほしい。転職の意思決定（クックパッド → Ubie）入社して一週間、素早く生き残るためにやったこと（Ubie）入社一ヶ月の分報戦記（Ubie）","link":"https://blog.h13i32maru.jp/entry/2021/08/29/174057","isoDate":"2021-08-29T08:40:57.000Z","dateMiliSeconds":1630226457000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"ソフトウェアドキュメント作法","contentSnippet":"こんにちは丸山@h13i32maruです。つい先日、devchat.fmというポッドキャストに出演して、「ドキュメント」というお題について話しました。なぜこんなニッチなお題について話したかというと、Ubie Discoveryに入社して5ヶ月の間にいくつか*1まとまったソフトウェアドキュメントを書いたので、自分の中でホットな話題だったからです。#devchatfm 33回目は、Ubie DiscoveryのSWE @h13i32maru にドキュメントを書くことで得られるメリットや、ポイント・工夫などを聞きました！#33 チームの生産性を上げるドキュメントのすすめ with@h13i32maruhttps://t.co/TrmZd13D91— 久保 恒太 / Ubie CEO (@quvo_ubie) 2021年8月12日  これらのドキュメントは個人的にわりと良く書けたと思ってますし、他のソフトウェアエンジニア（以下SWE）からも「わかりやすい」「すごくいい」などの感想をもらいました。それに気を良くしてdevchat.fmでもべらべらと喋ったのですが、せっかくなのでちゃんとまとめておこうと思ってブログに書くことにしました。今回はソフトウェアやシステムの内部構造を説明するドキュメントについての話です（システムドキュメント、ARCHITECTURE.mdなどと呼ばれるようなもの）。ユーザマニュアル、Design Doc、ADRなどのドキュメントについてはスコープ外です。それと僕はテクニカルライターとかではなく、ドキュメントを書くのが好きな普通のSWEです。なので的はずれなこと書いてたらごめんなさい。# なぜドキュメントを書くのか# どんなときに書くと良いのか# 意識してること## メンタルモデル## 俯瞰## レイヤー## 推測## その他# ドキュメントの問題## メンテナンス## 保存場所# なぜドキュメントを書くのかドキュメントを書く理由は人によって様々かもしれませんが、僕の場合は「ドキュメントにより、そのシステムをスムーズに理解できて、コードの読み書きを効率的にできるようになるため」です。例えばドキュメントを読んでから、システムのコードリーディングをすると、所要時間が半分になるならすごい時間の節約になりますよね。そのシステムに関わる人が多ければ、ドキュメントを書くのに使った時間を回収することができると思います。つまり、ドキュメントをアセット（資産）にすることで、生産性を上げたいということです。極論、一人で開発してるならドキュメントは不要なことが多いです。しかしチームで開発している場合は、ドキュメントがあるおかげで新しくチームに入った人がスムーズにシステムを理解できれば、生産性が上がるはずです。そしてシステムに触れる人が多ければ多いほど、そのドキュメントのRoIは良くなります。# どんなときに書くと良いのかなんでもかんでもドキュメントを書けばよいというわけではありません。前述したとおり、RoIが良いと予想される場合に書くべきです。具体的には以下のようなシステムや機能についてはRoIが良くなりそうだと思っています。社内のSWEにあまり実装経験が無いようなシステム事業ドメインのコアでいろいろなSWEが触るようなシステム世間一般に情報が無い社内独自のシステム逆に以下のようなものはRoIが悪いかなと思っています。Webや書籍などの情報が十分にあるシステム社内のSWEに実装経験が豊富なシステムプロトタイプなど頻繁に実装や設計が変わるシステムとはいえ、このあたりはまだ自分の中でもふわっとしてるところです。# 意識してることコードの読み書きを効率的に行えるようなドキュメントを書くためにいくつかのことを意識しています。特に「メンタルモデルの構築」は重要だと思っているので、そのあたりを中心に紹介していきます。Ubieで書いたドキュメントを公開できると良かったんですが、流石に内部向けドキュメントすぎるので断念。## メンタルモデルコードの読み書きをスムーズに行うには、脳内にそのシステムのメンタルモデルが構築されているかどうかにかかっています。メンタルモデルとは「そのシステムの設計や実装について推測可能になる」ということです。例えば「ここがooってことは、多分あれはxxだろう」とか「この機能を追加するにはあのあたりのコードに手を入れればよさそう」などです。このメンタルモデルというのは「コードを読む → 脳内で抽象化する → モデルとして組み立てる」という感じで構築されていきます。しかしこれをコードを読みながら行うのはすごく大変です。というのもコードは最も細かい粒度で書かれておりそれを読み解くのは脳内メモリとCPUをかなり使いますし、そもそもコードはメンタルモデルの構築を目的に書かれていません。そこで、ドキュメントの出番です。メンタルモデルを構築することを目的に書かれたドキュメントを読むことで、コードを読みながら行うよりも遥かに効率的にメンタルモデルを構築できるようになります。メンタルモデルの話は以前に書いた記事も参照してみてください。以降の話はすべてこのメンタルモデルをスムーズに作れるようにというのを意識したテクニックです。## 俯瞰ドキュメントにはまず対象システムの俯瞰から書き始めます。その俯瞰も詳細には書きません。読む人がほぼほぼ知ってそうなレベル、わかりきってるレベルから書き始めます。そうすることで読者の現在の理解とのギャップを最小限にして、スムーズに読み始められるようにします。そしてまずは最も抽象度の高いレベルのメンタルモデルを構築できます。システムドキュメントでよくありがちなのが、いきなり詳細な設計図、ER図、フローチャート、UMLなどから始まるものです。これは読者の現在の理解とギャップが大きすぎるので、理解が難しくなります。それに、そのレベルで詳細な場合はコードを読むのと変わらずメンタルモデルの構築も難しくなります。書き手の頭にはすでにメンタルモデルが構築されているので、いきなり詳細から書き始めたい欲求はありますがぐっと我慢します。## レイヤー俯瞰した内容から徐々にブレイクダウンした内容を書いてきます。アーキテクチャ、コンポーネント群、処理フローなどなど。このときに1つのセクション内で書く話題はレイヤー（抽象度）を揃えることを意識します。例えばあるウェブサービスの設計についてのドキュメントがあるとします。その中のコンポーネントについて書いたセクションで、APIサーバ(Rails)セッションサーバ(Redis)マスターデータ(Postgresql)FooService(Rubyのクラス)と並べてしまうと、FooServiceだけ別レイヤーのコンポーネントで浮いてしまいます。他にもテキストエディタの設計についてのドキュメントがあるとします。その中の処理フローについて書いたセクションでユーザ入力キャレット制御入力テキスト取得パースHTML更新と並べるとキャレット制御だけ他のものに比べて詳細すぎます。このように1つのセクション内に別レイヤーの話題が入ってくると、そのセクションの理解が難しくなり、結果としてメンタルモデルの構築が阻害されてしまいます。この考えはプログラムを書いてるときと同じ考えです。レイヤードアーキテクチャだったり、SLAP(Single Level of Abstraction Principle)と呼ばれるものですね。そしてここからわかることは、レイヤーをちゃんと分けてドキュメントを書くためには、そのシステムの設計自体もまた正しくレイヤーを分けて作られている必要があるということです。なので、もしドキュメントを書いていて、うまくレイヤーに分けて書けないなと感じた場合は、システムの設計になにか問題があるかもと思ってチェックしてみると良いかもしれません。## 推測メンタルモデルを「そのシステムの設計や実装について推測可能になる」と説明しました。人が何かを推測するときは「因果関係から推測（演繹的）」と「パターンから推測（帰納的）」があります。なのでドキュメントにもそれらの要素を入れることで、メンタルモデルを構築しやすくなります。具体的に僕が意識して書いてることは以下のような点です。因果関係から推測（演繹的）エディタ上にReactコンポーネントをマウントする必要があるので、パフォーマンスが必要インクリメンタルビルドはフルビルドと比べたときにパフォーマンスが良い一方で、実装は複雑になりがちで潜在的な不具合があるかもしれないこの補足により「エディタのパフォーマンス改善をするにはインクリメンタルビルド周りに手を入れる必要があるかも」「テキストを編集中に特定条件下だと不具合が起きるのはもしかしたらインクリメンタルビルド周りが怪しいかも」などの推測ができるようになります。パターンから推測（帰納的）未回答の質問チェック主訴の質問チェック症状の深堀り質問チェックこれによって「病院固有の質問はこれらと並列に実装されてそうなので、多分あの辺りから読めば良さそう」「ooという質問を追加したいけど、これらの質問と並列ではなさそうだから、症状の深堀り質問の中にいれるのがよさそうかも」というような推測ができるようになります。これら因果関係やパターンからの推測はそのシステムに詳しいSWE（= メンタルモデル構築済み）なら、コードを読まなくても大体のあたりをつけるという感じで自然と行っているものだと思います。## その他図miroを使って書くことが多いです。キャンバスが広いのとちょうどよいコンポーネントが揃っているのでおすすめです。レビュー# ドキュメントの問題最後にドキュメントにつきまとう「メンテナンスの問題」と「保存場所の問題」についてです。ただし、僕はどちらについてもベストプラクティスは持って無くて、どうしたらいいんだろうな〜と思いながらやっている状況です。## メンテナンスドキュメントは書かれたその瞬間から、コードや設計に対して古くなっていきます。これ自体は仕方のないことですが、問題はそれをメンテナンスしていくのが大変ということです。この問題に対して僕は現時点では2つ対策をとっています（が、どちらも完璧ではない）。ドキュメントにコードレベルの詳細を書かないつまりドキュメントには安定している構造（かつメンタルモデルの構築に役立つもの）を中心に書き、よく変更されるもの（コードレベルの詳細）は極力書かないようにします。サンプルコードや枝葉の実装解説などもできるだけ少なくします。これでメンテナンスの頻度自体を少なくできます。スナップショットだと割り切るそれでももしドキュメントとシステムに乖離がおきたら、そのドキュメントを読んだ人にその乖離を積極的に直してもらうようにします。というのも、ドキュメントを読んだということは実際のコードを直近読む可能性が高いはずです。なのでドキュメントの乖離に気づきやすいというわけです。それと最初からある時点でのスナップショットだと明記しておけば、古くなったドキュメントは信頼性が低いという前提で読者に読まれるはずです。そして古すぎてもう実際のシステムと違う点が多いものは、デメリットの方が大きいのでさっさと捨てましょう。## 保存場所ドキュメントを保存する場所はどこがよいのか？正直今のところどこが良いのかわかっていません。選択肢としては3つぐらいありそうです。システムと同じリポジトリ社内情報ストックサービス(notion、google docsとか)色々なドキュメントを保存するドキュメント専用のリポジトリ個人的には「ドキュメント専用のリポジトリ」に保存するのが良さそうなので、試してみようと思っています。理由はこんな感じです。SWEが慣れているレビューシステム(GitHubのPull Request)を使えるドキュメントの実例がすぐ近くにあるリポジトリをまたいだシステムのドキュメントを保存できるというわけで、ソフトウェアのドキュメントについて思っていることをつらつらと書きました。ドキュメント書くのは楽しいので興味ある人は是非書いてみるといいと思います！ではでは。*1:カルテエディタ、問診フロー、主訴検索についてのドキュメント","link":"https://blog.h13i32maru.jp/entry/2021/08/15/163619","isoDate":"2021-08-15T07:36:19.000Z","dateMiliSeconds":1629012979000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"Content EditableでWYSIWYGエディタ作るの楽しい！","contentSnippet":"こんにちは丸山@h13i32maruです。僕は今、Ubie Discoveryで医療従事者向けのカルテエディタを作っています。人生で初めてContent Editableを使ってエディタを作ってるんですが、それがすごく楽しいです！というのも、エディタを作るには色々技術的な課題があります。例えば、テキストをパースするには？ASTからHTMLをビルドするには？パフォーマンスのよい更新方法は？などなど。それらの技術的な課題を解決していくのが単純に楽しいという感じです。また、車輪の再発明は極力抑えつつ、自分たちのプロダクトでやりたいことを実現できるような工夫もしています。というわけで、今回はそんなエディタ作りで取り組んだ課題と解決策を紹介していきたいと思います。エディタの概要メンテしやすいテキストパーサ - PEG.jsメンテしやすいHTMLビルダー - ReactDOMServerライフサイクルをまたがる処理 - プラグイン機構パフォーマンスの良い更新処理 - インクリメンタルビルドキャレットのリセット回避 - キャレットプラグイン責務と依存の明確化 - レイヤードアーキテクチャリグレッションや不具合の検知 - ユニットテスト有益な設計議論やレビュー - ドキュメントエディタの概要まずはじめに作ってるカルテエディタを簡単に紹介します。いわゆるWYSIWYGエディタとして作っています。ただ、Google DocsのようなWYSIWYGというよりはNotionのように「いくつかの記法を持っていいて、それを入力するとスタイルが適用される」みたいな感じのものです。例えば今回作っているカルテエディタでは【】を入力すると見出しになり、：を入力するとラベルになります。このあたりの記法はカルテでよく使われる記号を元にしています。他にも特定の記法でReactコンポーネントを埋め込めたり、空セクションのグレーアウトなどの装飾が適用されるようになっています。余談ですがこういうタイプのエディタってなんて言うんだろ？個人的にはWYSIWYG2.0ぽいなと思ってます（調べても出てこなかった）。処理の流れはざっくり以下のような感じです。というわけで、以降では具体的な話をしていきます。メンテしやすいテキストパーサ - PEG.js今回テキスト（カルテ）のパースをどうするか悩んでいました。というのも過去にすごく単純なテキストパーサは作ったことはあり、その時の経験からある程度の規模のパーサをパーサ素人が書く/メンテするのはかなり難しいとわかっていたので。そこで以前に名前を聞いたことがあったPEG.jsというパーサジェネレータを調べてみたところ、どうやら宣言的な構文でルールを書くとテキストパーサを自動生成してくれるものだとわかりました。というわけで、実際にPEG.jsを使ってパーサを生成してしてみたのですが、宣言的にパーサを書けるのは思った以上に体験がよかったです。命令的なコード（if, forなどの通常のプログラミング）と違い、状態管理が発生しないのが特に良いですね。それにPEG.js自体の仕様は凄くコンパクトで学習コストもそんなにかかりませんでした。今後テキストパーサを実装するならPEG.jsを積極的に使っていこうと思います。ただし、PEG.jsでは以下の点に気をつける必要があります。宣言的な構文でルールを書くのは、いつもと違った脳みそを使う感覚があり、慣れは必要PEG.jsの正規表現（ぽい構文）はバックトラックや控えめマッチがなくて、貪欲マッチのみしか使えないPEG.jsの開発は結構前に止まってるようなので、開発が活発な他のパーサジェネレータに乗り換えたほうがいいかもしれないメンテしやすいHTMLビルダー - ReactDOMServerテキストをパースした結果のAST（Abstract Syntax Tree）からHTMLを組み立てるのに当初は文字列としてがちゃがちゃ組み立てていました。ただそれだと見通しが悪かったり操作しづらかったりで、実装やメンテのコストが高くなるのが目に見えていました（幸いにも補完はIDEの力でなんとかなりましたが）。そこで、JSXを文字列に変換できればHTMLを組み立てるのがすごく楽そうだなと思って調べたら、ReactDOMServerというどんぴしゃのものが公式にあったので使うことにしました（ReactDOMServerとありますが、サーバサイドやSSRとは関係なく使用することができます）。これによって、HTMLの組み立てを文字列操作や命令的コードで実装するのではなく、宣言的コードとして実装できるようになり、実装コストも体験（IDEの支援や通常のUI構築との親和性）もすごく良かったです。ライフサイクルをまたがる処理 - プラグイン機構エディタを作り始めたころはいろんなコンテキストのコードが一箇所にごちゃまぜになっていて、だいぶ見づらくなっていました。例えば「HTMLを更新した直後」では「キャレット位置の復元をする」「エディタ内にReactコンポーネントをマウントする」などのコンテキストが異なるコードを同じ場所に書かざるを得なかったのです。これはかなり辛いなと思って試行錯誤をしてるうちにライフサイクルをフックできるプラグイン機構作ればよさそう！とひらめきました。というわけで、エディタのいろんな処理タイミング（ライフサイクル）に外部からコードを差し込めるようにするためのプラグイン機構を作りました。例えば「エディタからテキストを読み出す直前」「HTMLを更新した直後」などなどのタイミングで外部からコードを差し込めるようになっています。プラグイン機構はTypeScriptのインターフェースとして提供して、実装側はそのインターフェースを実装してエディタに渡すようになっています。実際にこのプラグイン機構を使って、外部からReactコンポーネントをエディタ中に埋め込んだり、キャレットや改行の処理をするプラグインを作りました。ただ、欠点としてプラグインが提供しているフックタイミングをちゃんと把握してないと理解が難しくなります。現在はコードにコメント書いたりドキュメントでカバーしているという感じです。以前にESDocでプラグイン機構を作ったときもこのあたりはちょっと難しかったなぁというのを思い出しました。パフォーマンスの良い更新処理 - インクリメンタルビルド最初の実装ではユーザが文字を入力するたびに、エディタ内のHTMLを全て作り直していました。ただ、それだと文字入力があるたびにエディタ内に埋め込んだReactコンポーネントのunmount/mountが走ってしまいます。さらに画像があると文字入力のたびにその画像がちらついていました（再読み込みが行われるため）。この問題を解決するには全HTMLを作り直すのではなく、必要な部分だけ作り直すインクリメンタルビルドの仕組みが必要です。とはいえ、これは世に云う早すぎる最適化な気もします。悩んだのですが結局、インクリメンタルビルドを採用することにしました。というのも、これはエディタ設計の根幹に関わることなので、後から実装するとしても多分エディタの設計からやりなおしになるだろうなと。とはいえ最初から作り込みすぎるのは良くないので、まずはインクリメンタルビルドのキモである「そのユーザ入力による更新範囲の判定ロジック」「部分更新の仕組み」をざっくり作ってリリースすることにしました。細かいチューニングは後々必要になったときにやればよさそうなので。しかし、やっぱり実装は複雑で難しい感じに。。。このような仕組みはこれまで一度も作ったことのない部分なので、何度かリライトしないと洗練されないなと思っています。あとはOSSなエディタから学習するというのもありかもしれません（それも難しそうだけど）。キャレットのリセット回避 - キャレットプラグインContent Editableではキャレットの制御がめちゃくちゃ面倒です。なぜかというと、キャレットが存在する場所のHTMLを書き換えるとキャレット位置がリセットされ、親要素の最初の文字位置に移動してしまいます。これでは「ユーザが文字を入力→ 新しくHTML作成して書き換える」のたびにキャレット位置がリセットされて使い物になりません。そこで、HTMLを書き換える前にキャレット位置を覚えておいて、HTML書き換え後に適切な位置に戻すようにしました。このときにHTML書き換え前後でキャレット位置を保存・復元するのが難しかったのですが、最終的には以下のようにしました。HTMLを更新をする直前にキャレット位置にマーカー文字を挿入する: 例 foo{{caret}}barそれを含んだテキストをパースしてHTMLを組み立てるときに、キャレット位置をHTML要素として書き出す: 例 <div><span>foo</span><span class=\"caret\"></span><span>bar</span></div>このHTMLをエディタに書き込んだ後に、class=\"caret\"を持つDOM要素を見つけて、そこにキャレットを移動する実際はもう少し泥臭い実装が入っているんですが、それでもだいぶシンプルにできたと思います。それと、キャレット制御は編集処理のいろんなタイミングに実装を入れる必要があるんですが、前述したプラグイン機構を使うことで実装を一箇所に集約することができたのは良かったです。けど、そもそもキャレット制御せずにいい感じにできないのだろうか？？それともやっぱりContent Editable使う以上は必須になってくるのかな🤔責務と依存の明確化 - レイヤードアーキテクチャエディタを作るにはいろいろな処理を実装する必要があります。テキストのパース、ASTからHTMLの組み立て、編集処理、ユーザ入力のハンドリングなどなど。これらの処理をきっちり責務ごとに分割し、さらに依存関係を明確にすることは重要です。そこで、今回は「責務ごとにレイヤーを切って、依存関係をレイヤーからレイヤーへ単方向にする」というレイヤードアーキテクチャの設計をかなり意識しました。責務ごとにレイヤーに分けるときに注意したのは「エディタのレイヤー」と聞いたときに、なるべく自然と想像できるような切り方になるようにしたことです。ただ現在のレイヤー整理が正解なのかは正直わからないです。というのも僕は今回初めてエディタを作ったので、エディタについてのドメイン知識がまだ浅いためです。このあたりは今後も開発をしていくことでより良いものが見えてきそうです。ちなみに現時点で成功したなと思う責務分割は「ユーザ入力のハンドリング」と「テキストの編集処理」をきっちり分けたことです。このあたりは意識しないと境界が曖昧になり、処理がスパゲティになるので特に注意する必要がありました。リグレッションや不具合の検知 - ユニットテスト前述したようにエディタはいろいろなコンポーネントで成り立っています。それらのコンポーネントはなるべく疎結合を意識して作られていますが、とはいえある変更が思いもよらぬ影響や不具合を生み出すことがあります。それがメイン実装者ではなく他のメンバーも手を入れていくならなおさらのことです。そこで、ユニットテストはわりと充実させました。具体的にはパーサ、HTMLビルダー、編集処理あたりを中心にテストを書きました。特にASTやHTMLのテストはそのまま書くと大変なので、Jestのスナップショットテストをガッツリ使ってみました。カバレッジはあまり重視してなかったですが、さくさく書ける部分で大体80%ぐらい。これ以上はコスパが悪そうだったので、一旦このぐらいまでにしました。Jestをしっかり触るのは今回が初めてだったのですが、スナップショットテストは超便利だと思いました。ただし、テストコードとスナップショットが離れてるのでPRレビューはしづらいですね。。WebStormだとテストコードからスナップショットへ一発で飛べるようになってるので多少はましですが（ただし、一つのテストの中で複数のスナップショットテストしてる場合には対応してなさそう）。インラインスナップショットという手もありますが、それはそれでテストコードがみづらくなりそうなので見送りました。あとはやはり入力がユーザインタラクションになる部分(= UI側)に近くなればなるほどテストはしづらいのを改めて感じました。WebStormのスナップショット連携機能有益な設計議論やレビュー - ドキュメント      今回のWYSIWYGエディタは僕がメインで開発していたのですが、やっぱりチームメンバーと設計について議論してフィードバックをもらったり、実装をレビューしてもらいたいというのは当然あります。しかし、ここまで紹介してきたとおり、WYSIWYGエディタはどしても設計や実装が複雑になってしまいます。そうなると有意義な議論やフィードバックをもらったりするのも難しくなりますし、レビュー負荷も高くなってしまいます。そこで、今回はドキュメントをしっかり書くようにしました。具体的にはARCHITECTURE.mdを書いたり、文字だけでは分かりづらい仕様やアルゴリズムを図示しました。例えばカルテテキストから生成したASTの仕様や、そのASTからHTMLを生成する流れ。他にもインクリメンタルビルドの大まかな戦略や実装方法についてもドキュメントを書きました。ドキュメントを書くときに気をつけていたのは、エディタ全体について俯瞰的なメンタルモデルを構築してもらえるようにしたことです。他にもコード上には書かなかったり汲み取れなかったりすることは、ドキュメント化しました。具体的には「なぜこのような仕様・実装になっているのか？」「棄却した選択肢はなにか？」などです。このドキュメントを使って実際に設計議論をしたのですが、そのときに「エディタに機能追加するのが現状だと大変そうなので、改善したほうが良さそう」とか「Reactコンポーネントを追加していくときはプラグインの形で実装していくとよさそう」などの有益なフィードバックをもらうことができました。結果としてより良いものが作れたと思います。それと、チームメンバーからはドキュメント自体に対して、このようなフィードバックをもらうこともできたので、書いてよかったな〜と思っています。ちなみにドキュメントを書く工数は多少かかってしまいました。多分トータルで、2~3日ぐらいはかけたと思います。ドキュメントって書きすぎるのも良くないというのは理解していますが、今回はこのドキュメントを書くことで得られるメリット（チームメンバーの理解度アップ、有益な議論やフィードバック、今後のメンテナンス時のサポートコスト低減など）が僕一人の工数よりも大きいと判断したため書くことにしました。それと僕はもともとこういったドキュメントを書くのは好きな性格なので、書く事自体が楽しみだったというのもあります。ただし、今後のドキュメントのメンテナンスについてはどうするか検討中という感じです。以上、エディタ作りの楽しかったところ（課題・解決策）を紹介しました。エディタ特有のものもあれば、ソフトウェア開発一般的なこともあったと思います。「ここ参考になった」「自分ならこうする」などの意見があれば、教えてもらえると喜びます。最後に宣伝。最近meetyでカジュアル面談（実際は面談というか会社紹介）をオープンしたので、興味ある人は連絡ください！テキストエディタについて語りたい人も是非！","link":"https://blog.h13i32maru.jp/entry/2021/07/08/182316","isoDate":"2021-07-08T09:23:16.000Z","dateMiliSeconds":1625736196000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"入社一ヶ月の分報戦記（Ubie）","contentSnippet":"僕は仕事で分報をかなり活用しています。今年の3月に入社したUbie（ユビー）というヘルステックベンチャーでもめちゃくちゃ分報に書き込みをしています。どれぐらい書いてるかというと、入社初月で1700投稿（75投稿/平日）し、社内トップでした。社内の分報チャンネルの投稿数ランキング分報にはこの一ヶ月で経験した色々な仕事について感想や意見を書いています。まさに僕自身の入社一ヶ月の戦記と言えます。そこでこの分報からコメントをピックアップして入社一ヶ月を振り返ってみようと思います。振り返りは三つの軸で行いました。🏥 事業ドメイン(医療)🧠 組織・カルチャー🧑‍💻 自分の成長(ソフトウェアエンジニア)🏥 事業ドメイン(医療)サマリー知的好奇心をうずうずさせるようなプロダクト開発が好きな人には凄く合うと思う。以下分報振り返り。※事業戦略に関わるため、医療ドメインの具体的な話や事業課題についてはピックアップしていません医療ドメインとのファーストコンタクトチームの定例MTGに初参加したときの感想。当然医療ドメインの話がバンバンでててわからないことも多かったけど、やっぱりドメイン自体が面白いな〜となった。医療は患者としてしか体験してないのでその先に色々あって面白い。ちなみにOKRリファインメントというのは月次でやっている共同代表とチームのすり合わせMTG。タクミはタクティカルMTGの略でホラクラシーの会議体の一つ。事業構造の理解事業についての説明資料は色々あるんだけど、やっぱり自分で手書きしたほうが理解が早いし深いと思ったので、これまでに得られたインプットをもとに書いてみた話。これ書いたことでマクロな視点では理解がぐっと深まった印象ある。もちろん複数事業・複数プロダクトあるのでそれらについてはまだまだ浅いんだけど。ちなみのこのときの図は清書してカジュアル面談で使ってる。医師の話は面白い週1で行われるDev Sync(ボトムアップ型の全体MTG)で社内の医学生による理想のカルテの話がめちゃくちゃよかった。主に海外ではどのようにカルテが書かれているかや日本との文化の違いを話してもらった感じ。やっぱり社内にドメインエキスパートとしての医師や医学生ががいるのはめちゃくちゃ良くて、医療ドメインについての解像度があがるし、何より単純に話が面白い。例えば他にも医師が診断してるときの推測の流れ、病院とクリニックの役割や経営方針の違い、診療科ごとの問診の特徴などなどの話を仕事中に聞ける。ちなみにこのDev Syncには医師に限らず全メンバーが自由にお題を持ち寄って10~15分くらい話す感じで運営されてる。毎回面白い話が持ち込まれるのですごくよい。医師・看護師インタビュー難しいこれは初めて医師・看護師のインタビューに出たときに、議事録をとってたのだけど色々専門用語が出てきて難しかったという話。コロナのせいで現地に行くのはちょっと難しいが、リモートでのインタビューは結構頻繁に行われてる。やっぱりインタビューに出るとユーザについて理解が深まるし、何より「くーーー、もっと良いもの作りてなぁ」って思う。ちなみに僕の個人的な感覚ではtoBプロダクトのインタビューってユーザからの切迫度が高い感じする。そりゃ業務で毎日使うわけだし、不具合があったり使いづらいところがあれば自分だけじゃなくて同僚や患者にも迷惑がかかるから確かにそうだよなと。医療ドメインとプロダクトのキャッチアップUbieの各チームは基本的にスクラムを運用していて、ソリューションディスカバリーというのはその名の通り「課題に対する解決策を探索するトラック」というもの。これは初めてそのソリューションディスカバリーのMTGに出た話。このときはプロダクトのUI改善がお題だったのだけど、そこで話を聞いたり質問してるうちに色々ドメイン知識を得られてよかった。患者がどうやって問診に回答していくのかとか、どういうフェーズがあったり、どこで困ったりするのかなど。今後、Ubieにソフトウェアエンジニアとして入社する方でこういうところに興味が強ければ、できるだけ早めに参加するといいと思う。病院訪問で観察これは初めて病院に訪問して、実際のプロダクトの使われ方を見させてもらったり、使った患者さんの感想などを聞かせてもらったという話。間近でみると色々「なるほどな〜」という発見がある。Ubieでは問診アプリを作って病院に導入してるんだけど、高齢者の方はタブレット上で問診を回答していくのはなかなか難しそう。それに病院業務ってのは問診だけじゃなくて色々あってめちゃくちゃ忙しい。まだまだ色々やっていかないとなという気持ちになった。ちなみに同行したメンバーの中に医師もいて、医師がガチで着る服（スクラブ）で訪問していたので、病院への溶け込み具合がすごかった。🧠 組織・カルチャーサマリーむしろルールはかなりしっかりあって、その代わりに管理する/されるというのがない。これはカルチャーは自然発生するんじゃなくてみんなで開発してくものだという意思を感じる。そして、そのルール（と日本の法律）に則る限り自由にやってよいとなってる。例えば組織改変や異動なんかもルールにのっとれば誰でも実行できるし、自分が担う目的のためであればルールを侵さない限り何をやってもOK。あと各自の熱量もすごい高い。以下分報振り返り。手厚いオンボードこれはUbieのオンボードのお知らせなんだけど、すごく手厚くてめっちゃよかった。一番印象に残ってるのは代表の阿部さんからUbieの事業全体の話をしてもらった回。長期的な事業の話だけじゃなくて、前四半期・今四半期・来四半期の具体的な話もしっかり入っていて、それによって自分の中での解像度があがったと思う。新参者がいきなりハイコンテキストな長期的な話をされてもなかなか咀嚼が難しいと思うので。ただし事業ドメインや組織についてのインプットが大量にあるので、めっちゃ頭回転させながら聞く必要があった。流石にすごく疲れた。ちなみにオンボードはリモートでも物理でも好きな方で参加できる。共同代表の印象共同代表の一人久保さん（クーボ）についての印象を「転職の意思決定」というブログで「安定・堅実」って書いたんだけど、それが全然ちがったという話。実際に中に入ってみたらマジで全然違った！良い意味でめちゃくちゃアグレッシブ！ある日突然新しい機能のPRを送ってきたり、OKR管理システムを急遽作ったり、ちょっと怒られるかも？という施策が実施されたりと。その精神はUbieのバリューである「Launch and Launch」そのものって感じ。久保さんの印象を間違ってブログに書いてしまったことを謹んでお詫び申し上げます。Launch and Launch\"100の議論より1の実行\"を推奨することによって、\"大胆な仮説検証\"および\"継続的な失敗・学習\"を促進。何故ならば未踏領域の0→10においては常に不確実性の嵐の中にいるから。フルリモートこれはフルリモート可能かどうかって何か基準があるんだっけ？という話。結論はコメントにある通り。もうちょっと補足すると「本人が最もパフォーマンスを発揮しやすいと考える環境を各自が選択している」というのが実態。逆に言えばパフォーマンスを出すために自ら良い環境や働き方を考えてねっていうことだと理解してる。ちなみに今はコロナもあり、ほとんどの人がフルリモートで自宅から働いてるという状況。オフィスには全体の2割前後が出社しているって感じかなぁ。何回も自己紹介OKR Win Sessionというのは「各チームのOKR進捗とWin/Problemを共有していく毎週の全社MTG」のこと。基本はリモートなので、画面共有しながらなんだけど、SlackのWin Session用チャンネルがあってそこがワイワイしてて楽しい。2/3ぐらいはクソリプと雑コメが流れてきて、残りが質問とか感想とかの真面目なコメント。で、この会で自己紹介を急に振られてびっくりしたって話（このときはまだ入社してなくて、たまたまフライング参加していた）。このあともチームの懇親会とか、シャッフルランチとか、クオータキックオフとかでさんざん自己紹介した。自己紹介って得意じゃないけど、歓迎されてる感があっていい。オンライン入社オンラインで入社するのは初めての体験だったのでドキドキしながら入社したときのコメント。でも流石にずっとリモートってのも味気ないので、最初の一週間は午後から物理出社。やっぱり物理出社でメンターにすぐ色々聞けるのはいい。でも通勤はめちゃくちゃ疲れるということを再確認したので、翌週からフルリモートに切り替えた。あと、入社する前からUbieのSlackには入っていて分報でなんやかんや話していたので、その流れでオフィスで気軽に話せたのはよかった。「え？丸山さんまだ入社してなかったの？」みたいなこともあり、新しい入社体験だったなぁ。褒める文化と透明性これはJasper（僕が個人開発しているGitHub Issueリーダー）のコードを褒められたって話。今回は僕が個人的に作ってるものに対しての褒めだったけど、Ubieだと色んな人が色んな人を褒めてるのをよく見かける。Slackでもそうだし、さっきのWin Sessionという全体MTGでもそう。こういう文化あるのいいよね〜。その背景にはUbieは透明性をむちゃくちゃ大事にしていて、それのをおかげで人々が何をやってるのかがよく見える。だから褒めるのも色んな所で発生するんだと思う。カルチャーメンター僕のカルチャーメンターを担当してくれているsonopyさんがコメントしてくれた様子。Ubieでは独特の組織・カルチャーがあるので、それにスムーズにオンボードできるようにカルチャーメンターというのがつく（業務メンターというのも別途つく）。カルチャーメンターとは週1で1on1をして、Ubieのカルチャーとのアンマッチを解消していく。カルチャーガイドには推奨される行動や考え方がありそれを元にアンケートしていって、本人・カルチャーメンターが「もう大丈夫やな！」って感じられるようになったら卒業って感じ。カルチャーメンターついてくれるのマジありがたい。人事評価なしUbieは人事評価なしでやってる。普通の会社だと半期に一回人事評価が行われて、する方もされる方もめちゃくちゃしんどい。その割にはダイレクトな事業貢献はほとんどない（と思う）。Ubieではその人事は評価がなくて最高って話。詳しくは「人事評価は不毛？〜評価なしで100名の壁を超えたUbieの事例〜」を見て。ホラクラシーUbieはホラクラシーという組織フレームワークを使っていて、サークルという単位で活動をしている。このサークルに新しく入ったり、抜けたりというのが本人の意思で相当柔軟にできる。もちろん会社としてmustであったり、できる人が限られてるなどの理由で完全に個人の意思だけにはよらないのだけど。それでもかなりの自由度があると思う。今回は「エンジニアプレゼンス最大化サークル」ってのに誘ってもらったんだけど、まだ入社まもなくていろんなサークルに入るよりは一つのことに集中したいってことでお断りしたときの話。こういう意思決定も基本は本人の意思でやれる。ちなみに僕は入社一ヶ月後に隣のチームに異動したんだけど、異動願いを出したり誰かと調整したりというのはなかった。まあ人数の偏りが出ればもちろんチーム間で調整というのはあると思うけど、最大限本人の意思が尊重される。共同代表月次Syncというのは売上推移、事業変化、採用、財務状況、ハイライト/ローライトなどをもろもろ共同代表の二人から話しがある会のこと。加えて、代表が最近考えてることを話すパートもある。確かこのときは「みんなもっと（プロダクトの）探索しよう！」みたいな話だったと思う。共同代表の阿部さん・久保さんは芸風が違いそれぞれが面白い話をしれくれるのでめっちゃ良いな〜となった感じだった。OKRの運営Ubieでは四半期ごとにチームや全社のOKR（目標と計測指標）を考えてガチで運営してる。そのOKRはプロダクトオーナーがすべて決めるんじゃなくて、それ以外の全メンバーも考える。で、それらをチーム内でアラインしていく。僕は3月入社だったのでこのときはまだ2週間ぐらいしかたっておらず、全然わかんねーーーと思いながら自分の見えてる範囲で考えて回答した。ちなみに全社OKRも同じような構造になっていて、共同代表が考えた全社OKRと各チームのOKRとをアラインしていく。そして、最終的にクオータキックオフでそれが発表されて「この四半期もやっていくぞ！」みたいな流れになる。OKR発表会さっきUbieではOKRをガチ運営してるって書いたんだけど、そのOKRの発表会があったときの感想。これまで会社やチームの目標発表を楽しいと感じたことはなかったんだけど、UbieのOKR発表会はすごい楽しかったんだよな〜。まあまだわかんない話もたくさんあったけど。なぜ楽しいのかについて本質的な要因はわからなかったけど、各自の熱量が高いってのはありそうだなと。ただ金曜の夕方行われるのでめっちゃ疲れる。1Qキックオフこれは四半期ごとにあるキックオフが終わったときの感想。キックオフのコンテンツは大きく3つあって、OKR議論: OKRごとにチームを別れて、そこで達成方法や疑問意見などを話す季節ネタ: 今回はスクラムやPMF(Product Market Fit)について話したValue Award: この四半期で活躍した人・チームを表彰するこれがめっちゃしんどかったんだけど、すごい楽しかった。これを四半期ごとにしてるのまじやばい。あと面白かったのが、Value Awardって全社員が「○○チームのxxがよかった」みたいなのを好きなだけ投げ込んで、その中から共同代表の二人が選ぶんだけど、その投げ込まれたリストがあとから公開される。それを見るとどのチームがどんなすごいことやってるかとかがわかるし、自分のチームや自分の名前があると嬉しくなっちゃう。別にValue Awardをとるのが目標じゃないんだけど、「よっしゃ次こそは！」みたいな気持ちになる。これは良い仕組みだ。さっきもUbieは透明性を大事にしてるし、褒める文化があるって書いたけど、ここでも強く実感した。🧑‍💻 自分の成長(ソフトウェアエンジニア)サマリー一方で、全社横断で技術課題として僕が認識できたのは「マイクロサービスやモジュラーモノリスなどを使ったシステム間の独立性確保」「事業拡大や事業環境の変化に合わせたプロダクトセキュリティの継続的な向上」「システムの高頻度・常時デリバリーと安定稼働の両立」の3つ（多分これ以外にも色々ありそう）。これらは現在進行形で様々なエンジニアによって取り組まれている。でもやること多すぎて人が足らん！という感じ。以下分報振り返り。開発環境の構築ここから開発環境構築の旅が始まる。といってもだいたい1日ぐらいでなんとか動くようになった気がする。当然ハマったりドキュメント不足なんかはあるわけで、そのへんはハマった人が直していけばいいの精神。心強い業務メンターもついてるので特に不安とかはなかった。で、次の日に環境構築でハマったところのドキュメントPR出して完了。実際にコードのPRを出せたのは一週間後ぐらいだったと思う。未経験の技術僕はこれまでDockerを触ったことなくて、概念ぐらいしか知らなかったので、「わからん〜」って言ってたらアドバイスをくれたときの様子。「今どきDocker触ったこと無いなんて」て思われても仕方ないんだけど、Ubieだとそういうの全然なくて、わかんないことにはちゃんとアドバイスくれる。まあでも手取り足取りではなく、いい感じのポインタなどを教えてくれるレベル。でもそれだけあればある自走できるので十分。他にもまだまだ学習すべきものがある。僕は多少効率が悪くても少ない道具でやりくりしてしまうタイプなので、こうやって強制的に新しいことを学ぶ機会を得るのは個人的に凄く重要。きゅうりタスク最初のタスクとしていい感じのissueもらったときの話。すごい小ネタだけど、Ubieではそういうタスクをきゅうり（スナック感覚で食べれる）って言ってる。きゅうりだと思ってやり始めたらズッキーニ（食べるのがなかなか疲れるissue）だったとかもある。確かこの次に対応したissueがそれだった気がする。ズッキーニも美味しいよね。医療用語なコード当然っちゃ当然なんだけど、コード中に色々医療系の単語がでてくるけど、それが普通の単語じゃないので難しい。普通に読める単語でも、「injectionってことはデータとか処理を差し込むのかな？」とか思ったら「注射でした」みたいなのもあるし。コード図示医療ドメインの難しさも相まって、コード読むだけじゃ全然わからんので自分でコンポーネントの関係性を書きながら地道な理解をしてる感じ。ちなみにコードを読んで理解するだけだと何も生産性ない感じがするんだけど、こういう図を書き起こしてストックしていくとちょっとは生産している気がするので気が休まる（いや実際はほとんど変わらないんだけどね）。スクラムUbieでは開発は基本的にスクラムで回してるんだけど、初めてそこに入っていったときの話。最初はまじで何も理解せずにスクラムに入っていったんだけど、いろんなイベントが多すぎてわけわからんみたいになってた。で、やばいなと思ってスクラムガイドとスクラムの入門書を読んだ。スクラムが不確実性を減らすためにいろいろな仕組みを導入したり、学習や対話を重視するってのはUbieのカルチャーにもすごくフィットしていていいと思った（もしかしたらスクラムの思想がカルチャーに影響を与えてるのかもしれないけど、そのあたりはよくわかってない）。全社的にもスクラムマスターやプロダクトオーナーを増やそうっていう取り組みが行われている。僕はまだまだ実践できていないので、とりあえず使いこなせるようになってみたい。立ち上がり同月入社の方とか、1,2ヶ月前に入社した方とかがバリバリやっていて「うわーーー、僕は何もできてないーーー」って焦ってる様子。転職したのも6年ぶりだったし、周りの人はみんなすごいからマジ焦る。まあでもここで書いたように、他人と比較しても仕方ないので、自分が一番パフォーマンス出せるやり方で進めていくしかない。頑張っていこうな。というわけで入社一ヶ月の分報戦記でした。見ていただいた通り、特にネガティブなことはなく「医療ドメインはめっちゃ面白いし、組織・カルチャーも独特だけど凄く働きやすい」という気持ちで、毎日楽しく仕事をしています。もうちょっとUbieのことを知りたくなった方はこちらをどうぞ〜。Ubie Dev カルチャーガイド 社外公開版のカルチャーガイド会社紹介資料 事業・組織・開発について網羅的な紹介AI受診相談ユビー toC向けに公開しているサービス中の人と話してみたいという方はこちらから連絡できます🙋Ubieのメンバー一覧 に知り合いがいればDM僕のTwitter にDM採用サイト から会社説明会やカジュアル面談に応募最後に、転職の意思決定〜入社1週間の話も先日ブログに書きました。Ubieに限らず転職を考えてる人、転職したての人には何か役に立つかもしれないので、興味のある方は是非ご覧ください。記: 丸山@h13i32maru","link":"https://blog.h13i32maru.jp/entry/2021/04/04/172635","isoDate":"2021-04-04T08:26:35.000Z","dateMiliSeconds":1617524795000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"技術的負債の生態","contentSnippet":"@t_wadaさんが翻訳されていた技術的負債の記事をあらためて読んでみたら非常に面白かった。技術的負債の本来の意味が説明されているので、まだ読んだことがない人は一読をおすすめする。その翻訳記事を読みながら、Jasper（僕が開発しているGitHub用のIssueリーダー）のv1.0で技術的負債を返済したことを思い出した。そこで、その翻訳記事を参考にして技術的負債の生態について自分なりに考えてみることにした。すると面白い生態がいくつか見えてきた。例えば「生態③: むしろ技術的負債が生まれることそれ自体はポジティブである」などである。今日はそのことについて書いてみようと思う。ちなみに今回は技術的負債への対処までは解明することができなかった。いつか続きを書けたらいいなと思う。技術的負債が生まれる背景まずはJasperで経験した技術的負債を紹介する。負債の内容自体はそんなに重要ではないのでさらっと見てもらえれば十分だ。 負債  内容  ポーリングキュー  Issue取得のポーリングキューはもともと単純なFIFOだったが、優先度付きFIFOが必要になった  Streamのデータ構造  複数種類のStreamが異なるデータ構造を持っていたが、統一的なデータ構造が必要になった  Main/Rendererの通信  ElectronはMain/Rendererの通信に便利なモジュールを提供しているが、それを使うとパフォーマンスの問題が発生するため、別の仕組みを使うことになった  Reactコンポーネント  Reactコンポーネントを小さくわける・なるべく状態を持たないなどの書き換えをすることになった  モジュールの依存関係  モジュールの依存関係を整理して、UI層からデータ層に向かうシンプルな単方向依存にすることになった これらの技術的負債はJasper v1.0で返済したのだが、結構たいへんだった。最初から技術的負債を生まなければどれほど良いか。そもそもこれらの技術的負債はどうして生まれたのだろうか？僕が開発スピードを優先してコードの質を落としていたのだろうか？いや、そうではない。少なくとも僕はその時その時に自分が書ける最善のコードを書いていたつもりだ。では本当の原因は？それは僕がJasperの開発過程で様々なことを学習して新たな理解を得たが、その理解をコードに反映していなかったから技術的負債が生まれてしまったのである。例えば先程の「ポーリングキュー」はIssueリーダーというドメインについて学習して新たな理解を得たから生まれた負債だ。また「Main/Rendererの通信」はElectronアプリについて学習して新たな理解を得たから生まれた負債だ。本来ならこれらの理解をすぐにコードに反映すべきだったが、それをしなかった。しなかったというか、自分の理解とコードにギャップがあることをはっきりと認識できていなかったのだろう。それが徐々に大きくなっていき、コードに手を入れるのが大変になっていったのだ。では今後、技術的負債を生み出さないようにするにはどうしたら良いのだろうか？実は本質的には技術的負債を生み出さないようにすることはできない。なぜなら技術的負債は先ほど書いたように、学習の結果うまれるものだからだ。例えば今このとき自身が考える必要十分で最善のコードを書いたとする。しかし開発を進めていくとビジネスドメインやプログラミング全般について学習し、新たな理解を得る。この新たな理解と目の前のコードにはギャップが生じている。結果としてそのギャップが技術的負債になるわけだ。人は最初から完璧な理解をもって完璧なコードを書けるわけではない。むしろ技術的負債は学習して新たな理解を得られた結果生まれるものなので、生まれること自体はポジティブである。例えば「インデントが無いコードを書いていたが、コードフォーマットについて学習して新たな理解を得た結果、以前のコードが技術的負債となった」というような場合だって、前進しているんだから素晴らしい。どんな場合も「今この時、自分が考える必要十分で最善なコードを全力で書いた人」が責められる理由は一つもない。※ただしここでは話を単純にするために「学習しない・意図的に雑なコードを書く」というのは考慮していない。それは別次元の話である。生態①: 「対象についての理解」と「目の前のコード」のギャップが技術的負債生態②: 技術的負債が生まれないようにするのは本質的に不可能生態③: むしろ技術的負債が生まれることそれ自体はポジティブである2つの技術的負債とはいえ技術的負債があることで開発スピードや保守に影響を及ぼすのは事実である。ではどうすればよいのか？返済できる日がくるまでじっと耐えるしかないのだろうか？まず技術的負債を発生原因が異なる「ビジネスドメインの技術的負債」と「プログラミングの技術的負債」に分けて考えてみる*1。ビジネスドメインの技術的負債例えば医療機関を対象にしたソフトウェアを開発しているとする。開発するなかで「病院とクリニックではビジネスモデルが違う」「医療クラークや医療事務がいる場合、業務フローが異なる」などを学習して新たな理解を得る。そうすると、それまでのコードと今の理解にギャップが生じて技術的負債となる。Jasperの負債でいうと「ポーリングキュー」や「Streamのデータ構造」についての負債がこれにあたる。この負債は「学習して得た新たな理解をコードに反映できないので負債を作ってしまう」ことが多いだろう。なぜならビジネスドメインの学習というのはエンジニアに限らずチーム全体で積極的にすごいスピードで行われる。そうすると学習で得た新たな理解をコードに反映するタイミングを逃したり、学習が早すぎて追いつかないなどがあるからだ。なのでビジネスドメインの新たな理解を定期的にコードに反映する機会を作れば負債を最小限に抑えることができる。プログラミングの技術的負債例えばユーザデータを集計する様々なバッチを開発しているとする。開発する中で冪等性という概念とそれを実現する方法を学習し、新たな理解を得る。そうすると、それまでのコードと今の理解にギャップが生じて技術的負債となる。Jasperの負債でいうと「Main/Rendrerの通信」「Reactコンポーネント」「モジュールの依存関係」についてがこれにあたる。この負債は「知らないことで負債を作ってしまう」ことが多いだろう。なぜならコードを書くときは身につけたプログラミングスキルの中から適切なものを選んで使っていく（もちろんそれ自体にも難しさはあるが）ので身につけてないものは使えないからだ。なので、必要なときに必要なプログラミングスキルを学習する機会を作れば負債を最小限に抑えることができる。※ここでも話を単純化するために{ビジネスドメイン, プログラミング}の技術的負債を独立して考えているが、実際は両者は相互に影響しあう。また、新たな理解を正しくコードに反映できるかという問もある。生態④: 技術的負債には「ビジネスドメインの技術的負債」と「プログラミングの技術的負債」がある生態⑤: ビジネスドメインの技術的負債は「新たな理解をコードに反映できない」から発生する生態⑥: プログラミングの技術的負債は「知らない」から発生する技術的負債を小さく抑えるここまででわかった技術的負債へのアプローチは次の2点だ。「ビジネスドメインの新たな理解を定期的にコードに反映する機会」を作る「必要なときに必要なプログラミングスキルを学習する機会」を作るしかし本当にそんな機会を作ることができるのだろうか？ビジネスの場では常に最優先のタスクが存在し、不確実性が高いものもたくさんあり、時間と人はいつだって足らない。そんなときに一見ビジネス価値を生まないような機会に時間をさけるだろうか？その方法は...実を言うと僕にはここまでしか考えられなかった。本当なら生態を完全に解き明かし、技術的負債を最小限に抑える仕組みをズバッと言いたかったのだけど。でも、スクラム開発は技術的負債を小さく抑える参考になるかもしれない。スクラムは開発を通して様々なことを学習し、その学習で得られた理解をプロセスやプロダクトに反映し、現時点で最適な状態を常に保とうとする。そのために様々な機会（プランニング・リファインメント・レビュー・デイリースタンドアップ・レトロスペクティブなど）を仕組みとして備えている。これは先程の技術的負債へのアプローチとかなり共通する考え方である。なので、スクラムに技術的負債へのアプローチをうまく組み込んだ形が作れるかもしれない。生態⑦: ビジネスドメインの新たな理解を定期的にコードに反映する機会を作って対処生態⑧: 必要なときに必要なプログラミングスキルを学習する機会を作って対処生態⑨: これらの対処方法はスクラムと相性が良いかもしれないというわけで、技術的負債について考えたことを書いてみた。明快な結論は出せなかったが、こうやって考えを残しておけばいつか続きをかける日がくるかもしれない。最後に一つ注意してほしいのは、今回の話は技術的負債について精緻にも網羅的にも検討されたものではいということだ。例えばベンチャーでドメインの学習がすごいスピード進む場合どうしたら良いのか。すでに大規模なシステムがあり人も入れ替わっていく場合はどうしたら良いのか。などなど、検討していないことはたくさんある。そこはご了承いただきたい。記: 丸山@h13i32maru*1:「ビジネスドメインの技術的負債」が本来の意味での技術的負債であり、「プログラミングの技術的負債」そもそも発生させるなという扱いになっている","link":"https://blog.h13i32maru.jp/entry/2021/03/21/185345","isoDate":"2021-03-21T09:53:45.000Z","dateMiliSeconds":1616320425000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"「帰りの会」というリモート雑談の形","contentSnippet":"こんにちは丸山@h13i32maruです。コロナの影響により、昨年からリモートで働き始めました。最近転職して新しい職場になりましたが、こちらもリモートで働いています。同僚もリモートで働く人がほとんどです。そんなリモートワーク、基本的には最高なのですが、現状「雑談」はオフィスワークより明らかに劣っていると思います。そこで、前職では「帰りの会」という雑談タイムを自分のチームで運用していました。これが結構楽しく満足度も高くて大変良かったです（僕が退職したあとも続いてるらしい）。残った3名で今もやってます！（笑）いい相談＆雑談時間です— 堀犬 (@horiinu) March 7, 2021 今回はこの「帰りの会」という雑談タイムが何故良かったのか振り返ってみます。結論としては「仕事の話をメインのネタにした」「画面共有や開始時間などの小さな工夫を積み重ねた」という感じです。ちなみに、今回の話はオフィスワークでの雑談を再現するものではありません。リモートワークでの新たな雑談の形を模索するものです。目次帰りの会オフィス雑談・リモート雑談ネタのマッチング度合いリモート雑談のネタ小さな工夫帰りの会帰りの会は以下のように運営していました。毎日17:30から最大30分、エンジニア4人位で集まる今日やった仕事をGitHubのIssueやPRの画面を映しながら各自が話す質問とか相談とかも自由に割り込んでいく終わったら（なるべく）退勤するぱっとみはよくある朝会やDaily Standupのように見えます。しかし帰りの会は「昨日やった仕事・今日やる仕事・問題点」ではなく、「今日やった仕事」にフォーカスして話し始めます。今日やった仕事を話すなかで、「明日やる仕事・問題点」などに話題が移ることもあります。また「共有」ではなく「会話」が目的です。なので些細なことを質問したり、話が脱線するのも問題ありません。この「帰りの会」が結構うまく回っていて面白かったです。ではなぜこの帰りの会は良かったのか？一番の要因は「今日やった仕事」をメインのネタにしていたからだと思います。オフィス雑談・リモート雑談オフィスに出社しているときの雑談って自然と発生するのが基本ですよね。例えば隣の席の同僚に「ちょっと今いい？この前の〜」とか、コーヒーを入れに行ったときに居合わせた同僚に「最近何してるの？」とかとか。これをオフィス雑談と呼ぶことにします。オフィス雑談はその相手が興味ありそうなネタで話しかけたり、もしくはそのネタに興味ありそうな相手に話しかけます。そして、その雑談に興味を持った人が新たに参加して（もしくは呼ばれて）いきます。一方でリモートワークにおける雑談は予め日程と人が組まれて雑談をすることが多いと思います。例えばチームメンバーで毎週○曜日○時に雑談をするみたいな。これをリモート雑談と呼ぶことにします。リモート雑談は日程とメンバーがまず決まっていて、ネタは雑談が開始されてから手探りしていくことが多いと思います。ネタのマッチング度合い雑談が楽しくなるかどうかの重要な要素に「メンバーとネタのマッチング度合い」があります。オフィス雑談は会話してる人たちと話のネタのマッチング度合いは常に高い状態にあります。なぜなら、オフィス雑談は開始時にネタと人のマッチングが完了しており、新しく人が増えるときもうまくマッチングされた人だけが参加します。しかしリモート雑談の場合は日程とメンバーが決まっており、雑談が始まってからネタを探っていきます。なので、参加メンバー全員とネタのマッチング度合いは全員が全員高いわけではありません。マッチング度合いが高くない結果、活気が生まれづらかったり、特定メンバーだけ話している状況になりがちです。例えば「5人で集まったけど、サッカーの話になり、その中の3人だけが話してる。残りの2人は無の表情で聞いてるだけ」みたいな状況思い当たりませんか？リモート雑談のネタではリモート雑談を楽しくするにはどうしたら良いのか？一つの解決策は帰りの会でもそうしていたように「仕事の話や仕事に関係しそうなこと」をメインのネタにすることだと思います。なぜなら仕事の話は基本的には全員にマッチングするネタだからです。帰りの会では参加メンバーがエンジニアだけだったので仕事の話でも特にエンジニアリングに関わることがメインでした。ちなみに仕事の話じゃなくても参加メンバー全員がマッチングするネタなら楽しく話せると思います。ただ、個人的には仕事の話のほうが毎日変化もあるし、仕事自体へのメリットもあるので、雑談として好みです。とはいえガッチガチの仕事話にしちゃうとせっかくの雑談なのに気楽さがなくなってしまうので、楽しく雑談できるように意識する必要があります。そのためにいくつか小さな工夫をしていました。小さな工夫帰りの会を楽しく過ごすために以下のような工夫をしていました。「帰りの会」という名前どんな話題でもよい雑談ではなく、仕事に関連する話題とわかるようにするためといいつつも、気楽でくだけた感じを出したかったGitHubのIssueやPRを画面共有口頭で話すだけより内容の解像度がぐんと高くなるので、盛り上がりやすい画面が表示されてるので、ついつい内職してしまうのを防げる画面共有は誰か一人が担当するほうがスムーズやったことから話し始めるやったことは特になにも考えなくても話し始められるやること・相談事などは話し始めるのが少し難しい質問や感想を入れて楽しくする特に会がまだこなれないうちは意図的にするただし、進捗や間違いなどを詰めたり上長ムーブをすると楽しくないので気をつける毎日最大30分頻度が大事(要出典)なので毎日開催あまり話題がないときは早めに切り上げる逆に長過ぎてもダラダラしてしまうので最大でも30分で切り上げる開始時間は遅め（17:30とかにしてた）この後にミーティングや本番リリースなどがないのでリラックスして会話できる帰りの会が終われば、仕事を終えるというリズムを作れる帰りの会でアイデアやアドバイスを得られると、仕事のやりかけ状態となり、翌日仕事に取り掛かりやすいメンバーは多くしすぎない（4人位にしていた）多いとどうしてもネタのマッチング度が下がるそれと各自の発言量も減ってしまうというわけで、「帰りの会」というリモートワークでの雑談についてでした。帰りの会以外にもリモートワーク時代の面白い雑談はあります。例えば、Slackの分報に雑に色々書き込んでいるとそれにレスをもらい、そのまま少し雑談（テキスト）になったりすることがあります。これはオフィス雑談とリモート雑談の中間のような感じですね。このように今後はリモートワークで良い雑談をするための、再現性のある方法やソフトウェアがどんどん出てくるといいですね〜。","link":"https://blog.h13i32maru.jp/entry/2021/03/14/165934","isoDate":"2021-03-14T07:59:34.000Z","dateMiliSeconds":1615708774000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"入社して一週間、素早く生き残るためにやったこと（Ubie）","contentSnippet":"こんにちは丸山@h13i32maruです。1.5ヶ月の仮想無職をおえて、ついに3月1日から新しい会社（Ubie ユビーというヘルステックスタートアップ）で働き始めました。一週間働いてみて思ったのは、医療ドメインとUbieの事業構造（課題、ソリューション、プロダクト、マーケット）がおもしろい。これにつきます。医療ドメインは誰にとっても身近でありながら、その奥にはすごい森が広がってるみたいな感覚になりました。知的好奇心をうずうずさせるようなプロダクト開発が好きな人には凄く合うと思います。そんな面白いことに関わるんだから早くパフォーマンスを出したい！というわけで、入社して一週間でやったことを残しておきます。事業構造の図を書いてみたり、組織の波に乗ったり、Slackの分報を活用したりなど。先日の転職の意思決定という記事では事業ドメイン、組織、自分の成長、報酬という軸で考えたので、今回もそれに合わせて書いておきます。ただし、報酬は雇用契約以上でも以下でもないので特にやったことはありませんでした。目次🏥 事業ドメイン事業構造の図を書くドメインエキスパートと話す施策について質問する👥 組織波に乗るブログを書く🧑‍💻 自分の成長環境構築分報で互助🌱 その他分報にどんどん書く物理出社🏥 事業ドメイン事業構造の図を書く社内のカルチャーガイドにUbieが考える医療の課題やそれのソリューションが書かれています（カルチャーガイドは社外版がある）。これを読み込んだのと社内で見聞きしたことをがっちゃんこして、課題、ソリューション、プロダクト、マーケットの関係を自分なりに図に書いて咀嚼しました。図にしてみると各所がすごく良くシナジーしていて、事業構造のお手本のようでなるほどな〜となりました。その図を見せられないのが非常に残念ですが。ドメインエキスパートと話すサンプルカルテを社内のドメインエキスパート（Ubieでは本物の医師も在籍している）に解説してもらう会があったので参加しました。問診がどう行われるのかとか、書いてある問診結果の読み取り方などを聞く会です。たとえば「肩で息をする」と書いてあった場合それは単純にその動作を表すだけでなく「自助による呼吸が必要なレベル」と解釈する病院まで一人で来た（独歩）、杖や付き添われてきた（護送）、担架で運ばれてきた（担送）など、どうやって病院に来たかは重要深ぼっていく問診、広げていく問診、時系列に沿う滑らか問診などなど。この話をもとに、帰宅後に奥さん（看護師）ともカルテの話もしました。カルテや問診というのは医療における独自の言語なんだなと面白かったです。施策について質問するUbieでは隔週でランダムに数人集まりお互いやっていることについて会話します（コラボミーティングと呼ばれる）。そこでヘルステックならではの○○についてとか、今最も力をいれてる○○施策とかについて話を聞きました。新参者な僕には、それらについて分からないことが色々あります。なので素直に質問したり、分報に聞きに行ったりしました（Ubieでは全員がSlackに分報を持っている）。このへんはここで詳しく書くわけにはいかないのですが、すごく面白かったです。今後👥 組織波に乗る組織（カルチャー）については自分から動くというよりは、オンボーディングや日々の型がかなりしっかり設定されていてそれに参加しました。特にオンボーディングは手厚くすごく体験がよかったです。まだ参加したことのないものもありますがざっくりこういう感じです。3daysオンボーディング毎週のカルチャーメンター1on1課題図書・推薦図書の読み込み*1ホラクラシー関連タクティカルミーティングガバナンスミーティングOKR関連毎週の全社会でOKRについて各事業から話す会毎月OKRをチームと代表ですり合わせる会隔週でランダムで集まった数人でチームの仕事について話す会月末の全社会では事業全体について話す会四半期ごとのオフサイトで次四半期のOKRを話す採用関連リファラル採用のオンボーディングと伴走声をかけたい人達のリストアップ会スクラム関連どんな組織（カルチャー）にしたいか・どうすればそうなれるかをしっかり考えて言語化し、型を作って運用する。これが実践されているので、どのフレームワークも形骸化させずしっかり根付いているように見えました。純粋にめちゃ凄い。人が集まるだけではカルチャーは自然と作られない。意図を持ってカルチャーを作る必要がある。そんな感じです。ブログを書くUbieでは「全員で採用活動していく」というのがマジで行われています。全社OKRに採用の話がはいっていますし、オンボーディングに採用のセクションがあります。オンボーディング後も継続的な採用活動サポート（伴走）が行われます。その採用活動ですが、Ubieではリファラルがメインです。僕はあまりリファラルが得意ではないので、代わりに積極的にブログを書くようにしています。内容はUbieの話に限らずエンジニアリングや雑多な話も含めて、先月半ばから合計4本書きました。もともと文章を書くのは好きなので、頑張って続けていきます。今後🧑‍💻 自分の成長※ソフトウェアエンジニアとしての成長について環境構築ソフトウェアエンジニアの入社儀式として、開発用の環境構築で色々ハマるというのも経験しました。けどそれは常に変化する事業にソフトウェアが追従しているのでそういうものだと思います。ハマったところは本人がドキュメントを更新するの精神でPRを出したりしていました。今はgood first issueをやっています。分報で互助同日入社のソフトウェアエンジニアの方がいらっしゃったので、お互いの分報で環境構築の助け合いをしたりしていました。同日入社の方がいるとなんか安心感が得られますね。今後🌱 その他分報にどんどん書く入社が決まるとSlackに自分の分報が作られます。僕はそこに何でもどんどん書いていきました（もともと分報好きなタイプ）。些細な疑問や感想にもレスがもらえたりするのですごくありがたいですね。もちろん雑談チャンネル、質問チャンネル、チームチャンネルもあるので、慣れればそういうところで聞いていくのがよさそうです。ただ少し驚いたのは、前職と比べてSlackはわりと静かな感じがしました。本人が入る前から元同僚に荒らされており治安がやばい物理出社Ubieでの最初の一週間は物理出社しました。業務メンターも物理出社してもらえたので、隣で仕事をすることができて大変助かりました。コロナの影響により前職ではリモートワークをしていたので、物理出社で働くのは一年ぶりです。やはり何もわからん新参者にとってはすぐ隣に相談できる人がいるのはありがたいですね。しかし通勤はめちゃ大変というのを思い出しました（ドアツードア40分）。通勤は身体に良くない！多くの社員がリモートワークなのもあり、来週からは僕もリモートワークにします。今後というわけで入社一週間でやってることでした。早くパフォーマンスを出せるようにやっていくぞ！次は入社一ヶ月後ぐらいにまたブログ書こうかな。ではでは。【PR】最後にお決まりのDMください。もしくは採用サイトからカジュアル面談や会社説明会に申し込むこともできますー。どうぞよろしくおねがいします 🙏*1:How Google  Works、一兆ドルコーチ、Measure What Matters、スクラムガイド、Running Lean、医療現場の行動経済学","link":"https://blog.h13i32maru.jp/entry/2021/03/07/163441","isoDate":"2021-03-07T07:34:40.000Z","dateMiliSeconds":1615102480000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"自宅を快適にするために買ったものとか","contentSnippet":"こんにちは丸山@h13i32maruです。最近転職したのと、子供がいるなか快適にリモートワークできるように、西新井の2LDK賃貸に引っ越しました。書斎最高！西新井も最高！引越し後、自宅環境を住みやすく整えるのが楽しかったので、以前から使っているものも含めて買ったものや自宅付近の環境について記録しておきます。ガチ勢てはないので、普通の範囲ではあるとおもうけど。場所次の職場は三越前駅が最寄りなので、そこになるべく行きやすい場所を検討しました。同僚から東武伊勢崎線だと一本で行けると教えてもらってその沿線で色々見た結果、足立区の西新井が良さそうだったのでそこで物件検索。足立区、治安がよくないイメージだったんですが西新井はファミリー層が多く、北千住とは全然違う雰囲気で落ち着いています。ファミリー向けのでかいマンションもいくつもあり、数年前に再開発が行われたようです。保育園は少し前に爆増しており、待機児童はほぼゼロ。西新井周辺にもわりとたくさん保育園があります。https://www.city.adachi.tokyo.jp/kodomo-seibi/taikijidousuu.html駅近くにアリオ（イトーヨーカドー）とイオンがあり、アリオ側の方には大きな公園もあります。小さな子供がいると公園は重要度が高いので嬉しいです。買い物はだいたいネットスーパーなのですが、お店に買いに行くのも好きです（今はやや難しいけど）。西新井にはスワヤという有名な激安八百屋があります。肉と魚の良いお店はちょっと見つけられていないですが、イオンは割と力を入れてそうでした。物件子供と奥さんが日中家にいるなかでの、リモートワークがしばらく続きそうなので2LDK以上。あとは徒歩駅10分以内、築浅、予算15万円以下とかの条件で探しました。西新井では2LDKなら10〜13万円くらいで全然見つかるようです。最終的には不動産屋でキャンセルされた物件が条件最高でネット無料（これは遅くてだめだったけど）もついていたので、そこに決めました。他には戸建て物件をみたんですが、立地良くない・小さい子供には階段が危ない・日当たりと窓数が微妙ってことで見送りました。ネット環境回線物件についてるネットは測ってみたら60Mbpsほどしか出ませんでした。無線LANも完備していましたがそちらは更に遅くて30Mbpsぐらいしかでない。こりゃだめそうと思いつつも一応提供会社に確認してみると、一部屋10Mpbsぐらい出ればいい程度の設備しか入れてないとのこと。マンション自体にはフレッツ光+光配線方式が入ってるのにどうしてこんなことに。。あいだのルータの性能なのだろうか？まあどうしょうもないので備え付けネット環境は諦めて、個別に契約（フレッツ光 + BIGLOBE）することにしました。結果、めちゃはやい！調子が良いと有線LANで500〜600Mbpsほどでます！前居はVDSLだったので、むちゃくちゃ改善されました！最高！NURO光は管理会社から無理と言われていたので検討してません。無線ルータこれまで使っていた無線LANルーターはちょいちょい接続が切れたりしていたので、新調しました。これはIPv6対応しており、BIGLOBEのサイトで対応機種一覧にも載っています。Google Nest WiFiはIPoEに対応してないとのことで諦めました。BIGLOBEでIPv6オプションしていたので、終端装置にルータを接続するだけで自動判別してつながって便利でした。部屋数と距離がふえたので、中継機も必要かもと思ったんですが、今の所大丈夫そうです。書斎デスクこれまでは小さなテーブルをリビングにおいて仕事や個人開発してたけど、念願の書斎手に入れたので、デスクを新調。僕は腰が痛くなりがちなので、時々たってパソコンしてみようと昇降式デスクにすることに。1cm単位で高さを変えられるので自分の体に合わせやすいのも利点ですね。当初はflexispotにしようと思ったんですが、納期が4月とかだったので諦めて、アマゾンで山善のものを購入しました。スペックと値段はほぼ同じなので満足。組立サービスもお願いできて便利でした。サイドテーブルデスクは横幅120cmで十分と思っていたけど、もうちょいあってもよかったです。なので前居で外部ディスプレイおいていたサイドテーブルを横に添えたらちょうどいいさいずになりました。大きい机を買っても小さくできないので、100〜120cmのデスクを買って、サイドテーブルで拡張するのは結構おすすめです。椅子椅子は職場で座っていたハーマンミラーのセイルチェアがよかったので、特にほかを検討することなく決定。ただし定価だと10万ぐらいするので、オフィスバスターズってところで6万円の中古を購入しました。これまでは木のダイニングチェアでパソコンしてきたので、だいぶ進化し。快適〜。ジョイントマット椅子のローラーで床を傷つけないようにニトリで購入しました。ジョイントマットなのでサイズを調整しやすくて便利です。これは表面の布感が好みでした。ただその分、ローラーは少し回りにくいかも。ケーブルトレイテーブルに固定して配線をスッキリできて便利です。昇降式の場合、上げ下げするので各種配線をまとめておけるので安心です。ディスプレイ特に不満点もオススメもポイントなし。4k 60hzに対応してて、ベゼルはWebカメラつけるのにちょうどよいです。今ならもっと良いのあるかも。WebカメラMacについてるカメラでもいいのだけど、撮影角度を良くするために外部ディスプレイ上部から撮影したかったので購入。Amazonには色んなメーカーのが安くたくさん売ってるが、どれがまともなのか分からないので知ってるメーカーのものにした。フルHD・30FPS特に不満なく使えてる。レンズフードがついてるのは物理的にカメラを遮断できるので安心感あってよいです。キーボードフィルム以前のMacはバタフライキーボードで凄く打ちづらかったので、フィルムをつけて打ってました。今はシザーキーボードに戻ったけど、その時の名残でつけています。長くタイプしてても指が痛くなりにくくておすすめです。ディスプレイ台https://www.amazon.co.jp/gp/product/B07BVHWC9D/ref=ppx_yo_dt_b_search_asin_title?ie=UTF8&psc=1僕はディスプレイとMacを前後で置くスタイルなので、ディスプレイを少し高くするのに買いました。台の下に開発用のスマホおいたり、配線を通せて見た目もスッキリできてよいです。以前は机のスペースの都合上、コンパクトな高さ可変式の台を使っていました。こちらも便利でおしゃれでよいです。いまはサイドテーブルの上においてあります。ワイヤレス充電器AirPods充電用にかいました。オンラインミーティングするのにAirPodsの充電が切れてるとだいぶ面倒なので、簡単に充電できるのは助かります。ハイパワータイプにしたのは特に理由なかったと思います。二酸化炭素計僕は家で作業してるとたまに頭痛がしたり、だるくなる事があります。そういう時は窓開けたり、散歩で良くなることが多いです。これは多分二酸化炭素濃度が問題なのかなと思い、二酸化炭素濃度計を購入。NDIR方式でAC電源かUSB給電できるものを探して、こちらを購入。グラフも見えるし、モノクロで謎の派手さがなく良い感じです。最初は屋外でも800ppmでてたので、キャリブレーションしたら正常になりました。ノートPCスタンド自宅用と仕事用のMacがあるので、1台をかたづけるのに購入しました。平置きするより断然スペースとらないのでおすすめです。スマホもおけるタイプもありましたが、コンパクトさをえらんでこれにしました。PCマットなくてもよいのですが、スマホとかペンとかおくのにガチャガチャうるさくなくて快適。オープンラック僕の場合は物理本はほとんど処分してるので、立派な本棚は不要です。けど多少は物理本があるので、小さくてスッキリ見える山善のオープンラックを購入しました。合わせてブックエンドも購入。ネジ穴が皿穴になってて細かいところもちゃんとしてました。山善良いメーカーだな。ティシュケースせっかくなのでティシュも紙箱のままではなく、ケースにいれることにしました。取替も簡単なので良い感じです。ポット作業中は水分はしっかり飲む必要あるので、部屋ですぐに飲めるようにポットを購入しました。クッキークリーム色かわいい。家のケトルが800mlなので2回分入る1.5Lにしました。お茶はコーン茶おすすめです。香ばしてく美味しいです。ナッツ類リモートワークでの昼食は眠くならないように少なめにしてるので、夕方小腹が空きます。あと朝早く仕事始めるとお昼前にお腹が空いてきます。その時に食べる用として、ナッツ・ドライフルーツ・ジャイアントコーンなどを買ってボトルに入れてあります。エアコン友人の助言により一番安いのにしました。特に良い点も悪い点も無いです。強いて言うなら、もう少し静かだとよかったかな。ビデオミーティングでの音が気になるかもなので。リビングシーリングライト特に吟味したわけではなく近くのノジマで購入しました。明るさ、色味を調整できてメモリーできるならなんでもよさそうです。お掃除ロボット奥さんが友人から凄くおすすめされたとのことで特に検討せずこれに決めました。間取り図を覚えるタイプではなく、適当に走り回るタイプなので、安くてかわいい奴です。注意点は無線LANは2.4GHzのみのようです。そりゃそうか。カーテン特にこだわりはなく1級遮光と防炎と色で決めました。ピッタリの横幅がなければ小さいより大きいを選択するのがよさそうです。品は満足しましたが、Amazon梱包の都合上折り目がついてしまいます。それが嫌な場合はニトリなどで買うのがよいかもしれません。僕は次の日には気にならなくなっていました。キッチンマグネットフック前居は換気扇のカバーに溝があったのでそこにS字フックをつけてお玉などをぶら下げていました。新居はそれがないのでマグネットタイプを購入したのですが、すごく便利です。少しフックが浅めなので、大きなものをかけるならこれにS字フックつけると解決します。ゴミ箱子供が中身をいじらないように背が高くて蓋付きを選びました。それ以外は特にこだわりはありません。布巾掛け使った布巾をかけるのに便利です。アイデア商品って感じで好き。キッチンマット毛足があるタイプだとそこにゴミが溜まったり、掃除ロボットが掃除できないのでつるつるタイプを購入しました。低反発なので長時間たっていても疲れないらしいです。ベビーゲートキッチンに子供が入ってこないように設置しました。突っ張り式・拡張フレームあり・通行ドアあり。掃除ロボットが下を通れるように空中に少し浮かせて設置してあります。安定感あるので多分大丈夫だとは思うのですが、真似する場合は自己責任でお願いします。ウッドブロックを台座にしようと思います。発泡スチロールの台座も検討しましたが、子供がかじりそうなので却下。ベッドルーム化粧台前居でパソコンデスクとして使っていましたが、今回新しいデスクを購入したので、これは奥さんの化粧台としてベッドルームへ行きました。コンパクトな机なので、ベッドルームのちょっとしたスペースに配置できてよかったです。モバイルバッテリーモバイルバッテリーにもなるUSB電源アダプタです。これをベッドルームでのスマホ充電に使っています。モバイルバッテリーが必要になれば外してすぐに使えるので便利です。その他防災リュック地震あって怖いと思ったのでとりあえず購入。防災リュックには常備持ち出し、1次持ち出し、2次持ち出しがあるらしい。これは多分2次相当。人感センサーライト帰宅時や外出時に自動でライトがつくように玄関のライトを交換しました。本当は洗面所のライトも交換したかったのですが、E26金口ではなくGX53というタイプで、それの人感センサーライトが無くて諦めました。変換アダプタもありませんでした。残念。傘立てドアにマグネットでつけられる傘立てを購入しました。小物も少し置けるので、買い物バッグやマスクなどを置けて便利です。メルカリ今回はじめてメルカリ使ってものを売ってみました。7品出して6品は数日で売れました。ニッチなものでも結構すぐ売れて凄い。全体的に簡単にでしたが、配送の梱包については最初よくわからなかったです。コンビニでいい感じに梱包されるのかと思っていたのですが、流石にそれはなくて自分でやる感じでした。一応梱包から全てやってくれる配送方式もあるみたいです。あと、一回付属品を梱包しわすれたことがあり返品返金のごたごたがあったのだけど無事に収束しました。そういえば、売り上げ金をメルカリポイントにすると有効期限があるので要注意です。アンペア30アンペアから50アンペアに変更しました。部屋が増えたことによりちょいちょいブレーカーが落ちるようになり、仕事中に落ちると困るなと思ったので。その時、家内のブレーカーに40アンペアとあったので、40アンペアより大きくするには機器交換が必要と思っていました。けど、どうやらそれは漏電ブレーカーのアンペアだったようです。そもそもブレーカーには漏電ブレーカー・サーキットブレーカー・サービスブレーカーの3種類があります。契約アンペアオーバーになると落ちるのはサービスブレーカーで、新居の場合は屋外についていました。https://www.best-parts-media.jp/element/7223パソコン回収昔のパソコンを捨てたかったがお金がかかるしデータも心配だったので捨てられずにいました。今回パソコン回収.comに送って無料でひきとってもらいました。データ消去証明書も依頼すれば無料でもらえます。でも次回からは購入時に下取りに出すようにしたほうが良さそう。スマホ回収パソコンと同じく、不要なスマホも捨てられずに困っていました。調べるとドコモショップではメーカーに関係なく無料で引き取ってもらえることがわかりました。目の前でスマホに穴開けて使えなくしてくれます。ただ、スマホのストレージ容量をわかってないと引き取ってもらえないようです。理由はよくわかりませんが。ロードバイク売却東京に来てからは全く乗ってなかったロードバイクをついに売却しました。メルカリで売ったりすると譲渡手続きが面倒だったり、事故にあったりでもされたら怖いと思ったので業者に売却しました。2008年に30万円で買いましたが、1.8万円での売却。まあかなり古いモデルだし、1~3万円ぐらいかなと思っていたのでOK。検討中ソファー書斎にソファー欲しいと思って検討中です。一人用サイズか二人用か。物干し竿今の洗濯竿の位置が少し下なので乾きがあまり良くないです。あと干せる量も少し足らない。突っ張り式がいいかなと思いつつ保留にしてます。洗濯機ドラム式乾燥機にしようかと思っていますが、色々ありすぎて迷っています。ヒートポンプ式が安定ぽいけど、ヒートサイクル方式もあるし、高温のヒート式もある。ふわふわ感や傷みにくいのはヒートポンプ式だけど、生乾き防止はヒート式がよいらしい。掃除や故障については単純なヒート式のほうがよいのかな。あとは電気式の分離型もありかも。ガス式はそもそも無理ですが。食器棚食器がかなりあるので収納しきれないものはまだダンボールに眠っています。前居にはいい感じの棚がありそこに収納できたのですが、新居にはありません。さすがにAmazonで組み立て式を買うのはしんどそうなので、ニトリでみようかなとおもっています。というわけで、快適な生活をおくるために色々整備したのでした。今後もリモートワークメインになるので継続的に改善していきたいです。何かおすすめ商品があれば教えて下さい。そして、明日はUbie入社。緊張する。まずは生存頑張るぞい。blog.h13i32maru.jp","link":"https://blog.h13i32maru.jp/entry/2021/02/28/214701","isoDate":"2021-02-28T12:47:01.000Z","dateMiliSeconds":1614516421000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"ARCHITECTURE.mdというものを書いてみた","contentSnippet":"こんにちは丸山@h13i32maruです。システム全体を簡単な図とテキストでまとめる「ARCHITECTURE.md」というものを最近知りました。これは良さそうと思い、JasperのARCHITECTURE.mdを書いてみました。jasperapp/jasper/ARCHITECTURE.mdARCHITECTURE.md自体の目的は「プロジェクトへの新規参加者が全体像の把握を効率的に行えるようにする」という感じです。書き方の指針や注意点などは考案者による記事を見てもらうのがよさそうです。また良いサンプルとしてrust-analyzerというOSSのARCHITECTURE.mdが紹介されています。https://matklad.github.io//2021/02/06/ARCHITECTURE.md.htmlhttps://github.com/rust-analyzer/rust-analyzer/blob/d7c99931d05e3723d878bea5dc26766791fa4e69/docs/dev/architecture.mdhttps://gigazine.net/news/20210210-architecture-md/今回は実際に書いてみたときの「気をつけたこと」「感想」を簡単に残しておきます。Jasperのアーキテクチャに興味がある方がいればもちろんARCHITECTURE.mdを見てください😝気をつけたことARCHITECTURE.mdも一種のマニュアルだと思うので、読者が対象（今回はアーキテクチャやコード）についてのメンタルモデルを獲得できることを意識しました。このあたりの話は以前に会社のブログに書いたので興味あれば見てください。まずは読者がすでに持っているメンタルモデルを想定しておきます。JasperのARCHITECTURE.mdを読むくらいなので、Jasperを利用している人でかつプログラマーのはずです。なので今のメンタルモデルとしては以下のようなものを想定しておきます。見たいIssueの条件をStreamで作っておくと、Issueの更新が通知される。裏側は多分GitHub APIに定期的にアクセスしてる。もしくは常時接続や更新を通知してくれる便利なGitHub APIがあるのかもしれないその読者がARCHITECTURE.mdを読み終わったら、「不具合の調査や機能追加をするために、どのあたりのコードから見ればよいのか、探し方がわかる」という状態になるのを目指します。コードをスラスラ読めるとか、当該のコードにピンポイントでアクセスできるとかはちょっとハイレベルな目標なので今回は考慮しません。なので獲得してもらうメンタルモデルとしては以下のレベルくらいがよさそうです。主要なコンポーネントはFooとBarと...で、それらはxxな感じで関連している。あの機能に関しては多分○○あたりのコードから読み始めるとよさそうということで、このメンタルモデルを獲得できるような内容になるように意識します。具体的には現在もっているメンタルモデルに直接関わるコンポーネントとそこから一段潜ったコンポーネントについて説明することにしました。あとはJasperはElectronで作っている都合上、Electron自体のプロセスモデル（Main/Renderer/IPC)については記載さざるを得ません。その他に気をつけた細かいところはこんな感じです。あまり詳細に書きすぎないメンテナンスコストを抑えて、コードの詳細が変わってもARCHITECTURE.mdを変更しなくても良くするためそれと読者のメンタルモデルを考慮すると、詳細度が高すぎると理解の妨げになるためなるべく「何故そうしたか」を書くメンタルモデルを獲得し、それが頭に定着しやすくするため（丸暗記より、演繹的に導けるほうが覚えやすい）本文中に書くと読みづらくなるものはFAQにまとめたARCHITECTURE.mdではコードへ直接リンクは貼らないほうがよいらしいが、今回は貼ってみたARCHITECTURE.mdを読みながら具体的なコードにもすぐに目を通せたほうが、更に次の段階に行きやすいと思ったから図はGoogle図形描画を使ったポンチ絵を書くだけなら十分だし、オンラインですぐに編集できるので便利感想アーキテクチャ図を書くことが一番良かったです。今までは頭の中にしかなかったものが目視できるようになると、気づくことがあります。例えば今回だと、ポーリングもユーザイベントと同じレイヤーとして扱ったほうが理解しやすそうなのでディレクトリ構造を少し修正したほうがいいなと気づきました。それとJasper v1.0で大幅にアーキテクチャを変更したので、その整理という意味でも良かったです。それと仕事でこういうドキュメントを書くことがあれば、その練習にもなりそうです。あとは単純に満足感がありました。追記UMLは実装や設計を具体的に助けるものという印象があり、かなり実装詳細によってるのかなーと思います。一方でARCHITECTURE .mdは新規参加者が全体像を掴むことを目的としてるので、正確性には多少かけたとしてもざっくり把握できることを優先してるように思いました。 https://t.co/Asxpavylrd— Ryo Maruyama (@h13i32maru) 2021年2月20日  なのでARCHITECTURE .mdの次にUMLやもっと詳細度の高いドキュメントをみるのがよさそうです。UMLやARCHITECTURE .mdに詳しいわけではないので、間違ってるかもですが。という話もブログの最後に追記しておこう。— Ryo Maruyama (@h13i32maru) 2021年2月20日  というわけでARCHITECTURE.mdについてのメモ書きでした。OSSのメンバーだったり、仕事でアーキテクチャを設計・実装する役割の人は書いてみるといいかもしれません。詳細度もあまり高くないのでそんなに時間がかからないと思います。その割にはメリットもありそうです（多分）。","link":"https://blog.h13i32maru.jp/entry/2021/02/19/114906","isoDate":"2021-02-19T02:49:06.000Z","dateMiliSeconds":1613702946000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"転職の意思決定（クックパッド → Ubie）","contentSnippet":"こんにちは丸山@h13i32maruです。タイトルの通り、2020年末に転職の意思決定をしました。現職のクックパッドには大変お世話になりました。次はUbie（ユビー）という医療系ベンチャーに行きます。今は有給消化中で入社は3月1日からです。この転職の意思決定をするにあたり「事業ドメイン」「組織」「自分の成長」「報酬」の視点で色々と検討しました。そこで未来の自分に検討したことを残しておこうと思います。今の正直な気持ちを書いているので、Ubieに限らず転職しようか迷ってる人にとって何か参考になれば幸いです。ちなみに今回の転職は以下のような経緯によるものです。転職活動をしていたわけではなく、中の人からお誘いいただき入社に至ったため、他に検討していた会社はありません転職するかどうかは最後の最後まで迷っており、オファー後に色々考えて転職するかどうかの意思決定をしました目次感情に流されない事業ドメイン組織自分の成長報酬意思決定感情に流されないまずはじめに意思決定するための注意点として「感情に流されない」というのを意識しました。僕はソフトウェアエンジニアですが、誰にも負けない凄いスキルを持ってるわけではありません。コンピュータサイエンスに精通しているわけでもなく、なにか大きな実績があるわけでもなく、エンジニアリング以外の高い能力があるわけでもありません。なにかあるとすれば、プロダクト開発が好きだということくらいです*1。そんなエンジニアでかつ割と保守的な性格なので、転職というのはドキドキします。合わなかったらどうしようとか、転職する（しない）を後悔したらどうしようとか色々不安になってしまいます。結果、そういう感情面で意思決定すると現状維持や楽な方に流れがちです。しかも現職（クックパッド）は大変良い会社で働きやすく、料理というドメインも好きで、とても良いメンバーがいます。さらに僕はもうすぐ35歳になりますし、子供も生まれたばかりで、20代の頃とは違います。さらにさらに世間はコロナで大変な時期です。そこで、このオファーを受けるべきかどうか論点を整理して、なるべく感情に流されないように自問自答しました*2。なので今回はエモい話や感動的な話はほとんどありません。事業ドメイン組織・チームメンバー・使っている技術・給与などが一定の水準以上なら、事業ドメイン・プロダクトが僕の転職の意思決定にとって一番重要です。なぜなら自分が仕事（サービス開発）で一番パフォーマンスを出せる状態というのは、いかにその事業ドメインが自分にマッチするかにかかっているからです。じゃあどういうものが僕自身に合うかというと「自分が使って、自分の人生や生活が良くなるもの」というのがここ数年大事にしてきたことです。儲かる・社会貢献できる・ユーザ数が多い・最先端などはあまり重視していません。結果としてそれらが達成されるのはもちろん嬉しいことではあります。なのでクックパッドというのは僕（自分で料理を試行錯誤するのが好き）にとっては現時点で最高にマッチする会社です。とはいえ6年働いてきたので、やりたいことは結構挑戦させてもらいました。特に2018年から2年間はかなり挑戦しました。2020年は燃え尽きたという感覚もあり、少しクールダウンしながら次に社内で挑戦することを探している状態でした。通常業務をしながら2020年11月には次の挑戦のPoCを作ったりしていました。今でも「自分が使って、自分の人生や生活が良くなるもの」というのはすごく大事です。しかし私生活の変化、特に今年子供が生まれたのがきっかけで「自分と家族の人生や生活がよくなるもの」への気持ちが強くなってきました。なので次にもし転職するなら医療系（か教育系）がいいなと思っていました。子供が小さいうちは病院にお世話になることも多いでしょうし、妻が看護師であり、僕自身もちょいちょい病院に行くことがあるためです。そう考えながら、Ubieメンバーとのカジュアル面談で医療のことや市場について話を聞かせてもらったら知らないことばかりでした。なにより医療自体は僕にとって未知すぎて単純にドメインとして面白そうだなと感じました。それとUbieのミッション・プロダクト・ビジネスモデルについてもすごく明瞭で良いなと思いました。シンプルでわかりやすいことは正義です。そういうわけでUbieの医療ドメインやプロダクトは自分にマッチするかもと考えるようになりました。とはいえ「自分と家族の人生や生活がよくなる」という点で仕事をしたことはありませんし、これまで大事にしてきたことを変えるのは不安があります。それに実務面ではドッグフーディングがかなり難しくなります（些細な話だけど僕の開発スタイルにとってすごく重要）。けど、これは新しい挑戦と考えることもできます。問医療ドメインとUbieの事業は僕と家族の人生や生活をよくするか？自分が仕事で大事にしてきたことを変えて、新たなことに挑戦すべきか？医療ドメインで自分のパフォーマンスを出せるか？クックパッドでの次の挑戦は未達のままでも後悔しないか？組織Ubieは評価なし・役職なしという面白い取り組みをしています。これは事業や会社の成長に全ての時間を使うためというのが主な理由だと理解しています。そのため組織運営は独特なものがあります。現時点で僕が理解しているのは例えばこういうところです。評価がないので役職はなく、役割を重視したフラット構造意思決定は各役割を持った人が行う全員が最大限能力を発揮していると信頼している各自の成長に関しては自力でなんとかできる人しか雇わない個々人の成長ではなく会社の成長が各自の報酬として跳ね返ってくる会社の成長が報酬として返ってくるので、採用は全員で行う※このあたりはまだ入社前なので、理解が間違ってるかもしれないけど具体的なフレームワークとしてはティール組織の実装系である「ホラクラシー」というものを採用しています。ティール組織は以前に読んでいて面白い*3と思っていたのでこの組織運営には興味がわきました。次に組織全体ではなく個人にもフォーカスしてみます。まずUbieに誘ってくれた菊田さんがすごく楽しそうに仕事をしているのを観測しています。菊田さんとはクックパッドで一緒に働いたことがあり、そのときも楽しそうに仕事していましたが、Ubieではそれ以上に楽しそうに見えます。彼が楽しく仕事をしているというのは彼を知っている人なら、その会社にかなり良い印象を持つとおもいます。それと共同代表二人のバランスがすごくよく見えました。一方は強いリーダーシップ、一方は安定・堅実という感じでした。ただ共同代表二人とはまだ一緒に働いたことはなくて、面談等で話をさせてもらっただけなので、実際は違うのかもしれないですが。問ピラミッド型組織ではない、全く新しい組織を楽しめるか？苦手な採用で貢献できるか？自分の成長クックパッドは長く働いていることもあり、割とコンフォートゾーンでした。なので最近は自分の成長が鈍化している感覚がありました。2020年の後半はそれまで数年やっていたPdMやマネージャー職をやめて、エンジニア（Android）に戻ったのですが、20代のときと比べると物足らなさがありました。これにはいくつか理由はあると思うのですが、一番はエンジニア業務がしっかり分業化されているところにあると考えています。分業自体は大きな組織ではよくあることだと思うし、それが悪いとは思わないです。むしろ全体最適では必要なんだろうなと思います。しかし僕のようにしばらくエンジニアブランクがある状態での復帰が分業体制というのはちょっとミスマッチなのかなと思います。それとこれまでの経験からディレクション業務や人のマネジメントというのも期待されます。そんなわけで、この状態で数年過ごしたときに自分のエンジニアとしての成長や市場価値に対する不安がありました。一方でUbieのソフトウェアエンジニアは割と広い範囲を担当しているようです。※クックパッドでも僕が所属していたレシピ事業以外では状況が違ったり、レシピ事業の中でも色々なことをやる動き方はできるとは思います。自分の成長という視点において、Ubieでの面接も非常に有益な情報を得られました。面接は計3回ありスタンス面接・技術面接の各ディスカッションが大変楽しく&めちゃくちゃ疲れました。ヘトヘトになって帰った記憶があります（最終面接は雰囲気が違ったので割愛）。僕もクックパッドで面接官をしていますが、少なくとも僕個人はここまでの面接はできてなかったです。なのでUbieの面接官は非常に能力の高い人たちだなと思いました。そして多分他のメンバーも全員がこのレベルなんだろうなと。それもそのはずで、市場の不確実性をこの短期間で乗り越えてきた（乗り越えている）人たちなので当然といえば当然です。そんなメンバーと一緒に働くことができるのかと。というか、受かると思ってなかったのでよく受かったよなという感想があります。それと僕にとってこの面接はアトラクトとしてすごく効果的でした。問コンフォートゾーンを抜けて、技術的に未知なラーニングゾーンにコロナや育児をしながら挑戦できるか？Ubieで働くことは自分が成長し、自分の市場価値を大きくあげるか？報酬ベンチャーは給与が低いけどストックオプションでカバーするというのがよく見られる報酬設計なのだと思います。しかしUbieの場合は給与水準も普通のウェブ系企業と比べても遜色ないレベルであり、さらにストックオプションもあるという設計になっています。これは会社が継続し、上場すれば手堅さと夢の両方がかなう感じです。ただ家賃補助や交通費の福利厚生はやはりまだ弱いところもあり、そこは現職のほうがよかったです。けどそこはリモート勤務をしっかり使える会社なのであまりマイナスにはならなさそうです。このリモート勤務は子供がうまれてまもないということもあり、非常に魅力的です。一方でリモートで新しい会社にうまくなじめるかは不安はありますが。組織のところでも書きましたが、評価がないので給与が定期的に上がっていくという保証は全然ありません。評価がある会社でも保証はありませんが、上がりやすい力学はあると思います。給与が上がるかどうか（とストックオプション）は会社の成長と一蓮托生です。問今後数年間、もし給与が上がらないとして、生活費・養育費・貯蓄には十分か？数年以内に上場し、十分な評価額となるか？意思決定以上で各視点の問のリストアップは終わりです。あとは自問自答するだけです。医療ドメインとUbieの事業は僕と家族の人生や生活をよくするか？Yes.  頻度は少ないかもしれないがクリティカルである。自分が仕事で大事にしてきたことを変えて、新たなことに挑戦できるか？Yes. 不安はあるけどUbieでなら挑戦する価値がある医療ドメインで自分のパフォーマンスを出せるか？正直わからない。けどUbieには医療ドメイン未経験のエンジニアもたくさんいるらしいので、僕もいけるはず。クックパッドでの次の挑戦は未達のままでも後悔しないか？Yes. 心残りではあるが、後悔はしないだろう。色々やりきった。ピラミッド型組織ではない、全く新しい組織を楽しめるか？Yes. 楽しそうだし、今後のスタンダードになる可能性もある。苦手な採用で貢献できるか？正直わからない。でも僕なりの方法で貢献すればなんとかなるだろう。コンフォートゾーンを抜けて、技術的に未知なラーニングゾーンにコロナや育児をしながら挑戦すべきか？Yes. 35歳ということもあり、挑戦するなら早いほうが良い。妻の理解も得られた。Ubieで働くことは自分が成長し、自分の市場価値を大きくあげるか？正直わからない。けど環境としては最高。あとは自分次第。今後数年間、もし給与が上がらないとして、生活費・養育費・貯蓄には十分か？Yes. 東京都最低生計費試算調査結果をもとに数年分のを試算してみたところ、いけそうと判断。数年以内に十分な評価額で上場するか？Yes. これは完全に素人感覚なので正直当てにならないだろうけど、可能性は高そうに感じた。というわけで問はほぼYesでした。事業ドメイン、組織、自分の成長、報酬どれも魅力的です。誘ってもらったときは受かると思っていなかったので、不意に手に入ったこのチャンス、活かすべきだなってことでUbieに入社することにしました。正直なところ期待と不安が入り混じった気持ちではありすが、そういう感情を棚に上げるための論点整理だったので目論見通りではあります。次は実際に働いてみてどうだったかを書こうと思います。それまで頑張って生き残ろう。ちなみに一足はやくオンボードに参加しましたが、想像の10倍よかったです。この会社を成長させてきた現メンバーの人たち、やっぱり超すごいんだなぁと思いました。もしUbieに興味を持たれた方がいらっしゃればお気軽にDMください。中の人につなぎます（僕はまだ入社前なので話せることはそんなにない😇）補足1感情面で意思決定するの全然合う人もいると思う。僕の場合は現状や性格上、こういうふうに意思決定するのが合ってたというだけで。みんな後悔しないように意思決定してください！— Ryo Maruyama (@h13i32maru) 2021年2月12日  補足2貝木泥舟はめっちゃ感情に流されている例だろ!!! / “転職の意思決定（クックパッド → Ubie） - maru source” https://t.co/fsYMy7cKPD— KOBA789 (@KOBA789) 2021年2月12日  *1:仕事でいくつかのプロダクト開発、個人ではESDoc, Jasper, Trickleなどを開発してきました*2:恋物語で貝木泥舟が自問自答したように*3:抽象度が高くて1/3ぐらいしか理解できなかったけど","link":"https://blog.h13i32maru.jp/entry/2021/02/12/140245","isoDate":"2021-02-12T05:02:45.000Z","dateMiliSeconds":1613106165000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"見る・話すより、書くこと自体を楽しむサービス「Trickle」","contentSnippet":"こんにちは丸山@h13i32maruです。僕はTrickleというサービスを2017年から運営しています。Trickleは「Twitter、少し疲れてきたなぁ。でもやめたいわけではないし。。。もっと気兼ねなく使えるサービスがほしい」という思いから作りました。このサービスのコンセプトや作った背景を詳しく書く前にTrickleがどんなものか簡単に紹介します。Trickleには「トピック」という仕組みがあり、このトピックごとにメモを書いていきます。例えば僕は「本」「アニメ」「リングフィット」などのトピックを作って、そこにメモを書いています。また他の人のトピックを購読することもできます。このトピックという仕組みによりTrickleでは気兼ねなく自分の好きなことを書き留めることができ、書く事自体を楽しめます（1年ほど前にTwitterにもトピックという仕組みができましたがそれとは別物）。Trickleの主な画面つい先日バージョンアップ*1を行い、より使いやすくなりました。なので、今回は僕のようにSNSに少し疲れた人や書くこと自体を楽しみたいと思ってる人にもっとTrickleを届けたいと考えてこのブログを書きました。興味を持っていただけた方はこの先も是非読んでみてください！とりあえず使ってみたい方は https://trickleapp.me からインストールできます！目次特徴は「トピックとサブスクライブ」きっかけは「Twitter疲れ」コンセプトは「気兼ねなく書き留める」気兼ねなくを実現する「トピック」ユーザの感想ブログ特徴は「トピックとサブスクライブ」まずはTrickleの特徴である「トピック」と「サブスクライブ」について簡単に紹介します。トピック各自が自分の好きなトピックを作成し、そこにアクティビティ（メモや写真）を書き込んでいきます例えば「ゲームログ」「読書メモ」「猫の写真」「映画の感想」などのトピックを自由に作れますトピックはハッシュタグとは違い、ユーザごとに作成されますサブスクライブ他人のトピックをサブスクライブすることができます（いわゆるフォロー）トピックごとにできるので、「この人のゲームトピックは見たいけど、読書トピックはみなくてもいいかな」のように本当に興味のあるものだけを見ることができますきっかけは「Twitter疲れ」僕はTwitterが好きで2007年から利用していますが、2016年くらいから少し使い方に困っていました。(1) その人のツイートについて、見たいものもあるけど、見たくないものもある例：技術的な話はみたいけど、普段の雑談や愚痴はあまりみたくない(2) ○○についてツイートしたいけど、興味ない人がいたり、マウンティングみたいに思われないだろうか・・・僕はソフトウェア開発に加えて、料理や子供の話をするのですが、そういうのをツイートしづらいこれらが悪化すると、見たくないツイートが目に入ったり、他人の事を考えてツイートするようになり、結果として「徐々に自分が削られていく」ことになります。 でもそんなに辛いなら、Twitterやめれば？という話なんですが、Twitterでは有益な情報を得ることもできるし、知り合いと楽しくコミュケーションすることもできるためなかなかやめる踏ん切りは付きませんでした。それと、僕は「記録していく」というのが好きな性格なので、自分の行動や思考を何かしらに書き残したいとも思っていました。そこで、「他人のことを気にするのではなく、自分が主体であり、自分の好きなことを気兼ねなく書くことができるサービス」を使いたいと思い、Trickleを作り始めました。2017年から1年ほどクローズドテストを数名で行った後、2018年に一般公開しました。以下はその時のリリース記事です。Twitterのトレンドに入ったり、abemaTVに出演させてもらったりと思った以上に反響があり嬉しかったです。同時に、僕と同じように困ってる人は結構いるんだなぁと思いました。blog.h13i32maru.jpコンセプトは「気兼ねなく書き留める」Trickleのコンセプトは「自分の好きなことを気兼ねなく書き留めて、書くことを楽しむ」です。そのため、他者の書き込みを見たり、反応・コミュケーションしたりというのは優先度が低い作りになっています。これはTwitterやインスタ、最近だとClubhouseのような人とつながったりコミュケーションをするためのSNSとは大きく異なるものです。例えばTwitterのアプリストアでの紹介文にはこのように書いてあります。一緒に会話してみませんか ツイッターは無料のSNSアプリです。(...省略...) 海外セレブのアカウントをフォローしてみてください。(...省略...)世界中で人気のSNSでは、友達やあらゆる人とつながったり、世界に向けて自分の声を発信することができます。会話・フォロー・つながる・発信というワードからもわかるように、SNSは主体がネットワークであり、そのネットワークに参加しコミュケーションを楽しむことがメインです。一方でTrickleの主体はあくまでも自分であり、自分の好きなことを書いて残していくことそのものを楽しむのがメインです。とはいえ他者と全く関わりがないのは少し寂しいですし、一人でやるならメモアプリで良くない？となります。なのでTrickleにも気兼ねなく書き留めることを第一に考えつつも、サブの位置づけとして他者と程よい距離感で関われる設計にしてあります（このようなサービスなのでTrickleはSNSではなくアクティビティログサービスだと考えています）。SNSとTrickle、これはどちらが良い悪いではなく個人の趣向によるものですし、共存もします。現に僕はどちらも継続して使っています。人から反応が欲しかったりコミュケーションしたいもの（とか本当に他愛もないのも）はTwitterに、自分が楽しみたいと思うものはTrickleに書いています。※SNSをコミュニケーション目的で使っていない方もいると思いますが、ここではあくまでも各サービスのコンセプトという視点で書いています気兼ねなくを実現する「トピック」Trickleには気兼ねなくを実現するために「トピック」というものがあります。トピックは一見ブログのカテゴリーやSNSのハッシュタグに似ていますが、それらとは根本的に違うものです。どちらかというと「ジャンルごとにSNSのアカウントを作って使い分けている」というのが近い考え方です。例えば僕は「Trickle開発」「アニメ」「本」などのトピックを作っています。他のTrickleユーザも「漫画」「ゲーム」「ビール」「植物の話」などなど、思い思いのトピックを作っています。また、トピックのアイコンに統一感を出して、自分好みなデザインにして楽しんでいるユーザも結構いらっしゃいます。Trickleではこの作成した自分のトピックにアクティビティ（メモや写真）を書きとめていきます。そして他の人のトピックを個別にサブスクライブすることができます（フォローのようなこと）。なのでトピックをサブスクライブして見ている人は「その人のそのトピックをみたい」と思ってみています。つまり書く方は「この話みんな興味ないかも」「うざいって思われないかな」のようなことを気にせず気兼ねなくアクティビティを書くことができます。その他にも気兼ねなくを実現するために、Trickleには普通のSNSとは違ういくつかの特徴があります。🏠ホーム画面自分のアクティビティだけが表示されます。👀他人の投稿プッシュ通知が届きます。これは「プッシュ通知でみたいぐらい本当に関心があるトピックだけをサブスクライブする」という設計だからです。💚コミュニケーション機能🔔お知らせユーザの感想ブログこれらのコンセプトや機能によりTrickleは他のユーザとほどよい距離感が生まれ、結果として気兼ねなく書くことができるようになっています。そしてこのサービスを気に入ってくれたユーザの中には感想ブログや紹介ブログを書いてくださる方もいらっしゃいます。ほんとうに嬉しいかぎりです。本記事の締めとして、ここではいくつか引用させていただきます（掲載を削除したい場合はお手数ですがご連絡ください）。最後まで読んでいただき、ありがとうございました。自分の好きなことや活動を書き残したい人、つながりやコミュケーションを楽しむSNSから少し距離をとりたい人、そんな方々にTrickleはピッタリだと思うので是非お試しください。すでにお使いの方はTrickleが合いそうな知り合いに是非勧めてみてほしいです。https://trickleapp.me投げ銭（月額$1〜$5）もやっているので応援していただける方はよろしくお願いします。https://gumroad.com/l/h13i32maru*1:トピックのデザイン改善、UI改善、日本語化など","link":"https://blog.h13i32maru.jp/entry/2021/02/09/121751","isoDate":"2021-02-09T03:17:51.000Z","dateMiliSeconds":1612840671000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"2020年個人プロダクト開発(とか)の振り返り","contentSnippet":"今年は子供が生まれた（めちゃくちゃ可愛い、最高）ので、あまり個人のプロダクト開発には時間を取れないかなと思ってた。けど奥さんの理解と協力があり、結構開発できたと思う。めっちゃ感謝。というわけで簡単に振り返っておこう。Jasper v1.0のリリースhttps://jasperapp.io/Jasperを開発しはじめて5年目、ついにv1.0をリリースできたぞ！！v1.0の開発は6月末からはじめて、10月に完成という感じだった。v1.0ではコンセプト自体はそのままで、内部のアーキテクチャと実装を刷新(+2万L/-1.5万L)。TypeScriptのおかげでこういう大規模な改修もあまり怖くなくできて最高だったな。この刷新によってパフォーマンスが体感できるぐらいよくなったし、拡張性もだいぶよくなったと思う。他にもデザインのモダン化、GitHub API v4(GraphQL)に対応、GitHub Projectに対応、ドキュメントの刷新などなど。だいぶ頑張った。ユーザの反応もかなり良くて嬉しかったな。手前味噌だけどJasperないと仕事にならないぐらいめっちゃ使ってるので、今後も開発頑張っていくぞ。食卓ラボリリースhttps://dininglab.app/我が家は奥さんも僕も料理が好きだし、食べるのも好き。なので食卓楽しくするためのプロダクトとして食卓ラボを作った。構想は去年からしてて、実際の開発は2月ぐらいから初めて6月末にリリース。これでReact Nativeでアプリを作るのは3つめだし、だいぶこなれた感じで作れたな。React Native自体も安定してきて、特にネイティブモジュールを追加するのが格段に楽になって最高。React Navigation（画面遷移のライブラリ）もv5からReact Componentベースになってすごく使いやすくなって最高。バックエンドはGCP(GAE + Node.js + Express)で素朴に作ってある。あまり大したことはしてない。ただのCRUDアプリ。でも結構費用かかってるのでなんとかしたい・・・。なんでかっていうと投稿された画像のリサイズ処理をアプリサーバでやってる関係でGAE Flexibleインスタンスでメモリを増やしたりしてるから。あとCloud SQLも結構いい値段する。まあ面倒なことはすべて見てくれてるからありがたいんだけどね。とはいえ高い。あとアプリのアイコンはなんかもっといい感じにしたかったが、素人には限界だった・・・。やっぱりちゃんとプロにお金払って作ってもらうのがいいよなぁ。今は数名がヘビーに使ってくれている段階なので、来年は積極的に宣伝してフィットするユーザに届けたい & 増やしたい。Trickle改善https://trickleapp.me/TrickleはReact Native/GCPで初めて作ったアプリで2018年にリリースした。なのでコードは微妙なところが結構ある。というわけで、以降に開発したアプリの良いところを取り入れたり、ライブラリのメジャーバージョンアップなどをしはじめた。React Nativeのアップグレードには専用のツールなども用意されてるけど、うまくいったためしがない。なので新規プロジェクトを作って、パッケージ入れたりアプリの設定して、ソースコードを移植するという方法をとってる。大変だけどこれが一番問題なくアップグレードできる。あとReact Navigationもv4だったのでv5にアップグレード。API体系がガラッと変わったので大変だったが、食卓ラボで使っていたので移行パスは見えてた。物量は大変だったけど。年明けからはサーバ側のコードをリファクタしていく。今のコードはだいぶひどいので、食卓ラボの設計に合わせる感じ。十分な時間があればPrismaとかGraphQLとかCloud Runとかもやってみたいが、来年使える時間は少なくなるので無理そう。とりあえず1〜2月でリファクタと機能追加頑張る。Supporter Subscriptionhttps://h13i32maru.jp/supporter/プロダクトのサーバ代やドメイン代などをサポートしてもらえると嬉しいなと思って$1〜$5/monthでサブスクを始めてみた。まだサブスクしてくれた人はごく僅か。というかパブリックな場では発言してなかったかも。今の所特典はほぼないけど、サブスクしてくれてる人だけが使えるJasperやTrickleの機能とか考えてる。来年作れたらいいな。CodeLunch.fmhttps://codelunch.fm/今年復活させた！来年は継続的に録っていくぞ！ただanchor.fmの収録アプリは音ズレがひどくてだめだった。なにか違うのを試さないと。https://zencastr.com/ がいいと聞いたので試してみる。あと、CodeLunch.fmのサイトをNext.jsに入門がてらSSGで作り直してみるかーと一瞬思ったが、やっぱりやめてTS(ts-node)で雑にHTML生成した。テンプレートリテラルを使えばHTML部分をReactぽい雰囲気でかけるし、WebStormならこれをHTMLと認識してコード補完とかも効くので雑にやるには十分。依存パッケージもTypeScriptだけなのでお手軽。動的なペライチHTMLを作るときはこれぐらいでいいや。Twitter広告作ったプロダクトをどうやって宣伝すればいいのかわからず、これまで大したことはやってこなかった。Product Huntにのせたり、宣伝用のブログを書いたり、Twitterでエゴサーチしてユーザとコミュニケーションとってみたりぐらい。けど、ちょっと試しにTwitter広告つかってみたら、これがすごい簡単でよかった。今の所効果はあるのかないのか正直わからんけど、来年はもうちょっと真面目に使ってみようと思う。ただ、お金がめっちゃとけるのでそこは気をつけないといかんな。ESDochttps://esdoc.org/今年も全く触れなかったなぁ、、、issueやPR来てるのは認識してるんだけど、今の僕はESDocを使うようなプロダクト（JSのライブラリやフレームワーク）を作ってないので、開発の優先度があがらない。まあ真に必要でやる気のある人がいればforkするなり、新しく作り直すなりするだろう（僕がJSDocをみてESDocを作ったように）。ただツールとしてはすごい面白い題材だから、やりたい気持ちは結構ある。今ならTSのためのドキュメンテーションツールとしてTSで書きたいな。プロダクト開発以外だとコロナとかリモートワークとかエンジニア復帰とか色々あったなー。来年はさらに色々ありそうなので、頑張って生存していかねば。","link":"https://blog.h13i32maru.jp/entry/2020/12/31/140000","isoDate":"2020-12-31T05:00:00.000Z","dateMiliSeconds":1609390800000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"Jasper v1.0.0をリリースしました🚀（GitHub用のissueリーダー）","contentSnippet":"以前から開発しているJasper(GitHub用のissueリーダー)のv1.0.0をついに今日リース！やったー！前バージョンから作り直しレベルでコードを書き換えたので、かなり大変だったなぁ。でもそのおかげですごく良いものにできた！jasperapp.ioというわけで、こんにちは丸山@h13i32maruです。今日はJasper v1.0.0のリリース記事なのですが、GitHubを普段使ってる人にはJasperも是非使ってみてほしいので、少ししっかりめに書いてみました。よろしくおねがいします🙋🕵️ Jasperとは（初見の方向け）JasperはGitHubのissueを柔軟に見ることができるツールです。例えば「nodejs/nodeのbugラベルがついたissue」「自分が作成したpull request」などの条件でissueを見たり通知を受け取れます。この条件はJasperに次のようなクエリで設定します（この機能をStreamと呼ぶ）。repo:nodejs/node is:issue label:bug世の中にはGitHub用のissueリーダーは公式(github.com/notifications)含め色々ありますが、基本はGitHub Notifications  APIを使っています。しかしJasperはGitHub Search  APIを使っているので、それらのツールに比べてかなり柔軟な使い方ができます。僕は仕事でGitHubを使っているので、issueの見落としを防いだり、ユースケースに合わせて柔軟に使えるようにと考えて、このJasperを作りました。🔧 v1.0.0での改善点(すでにJasperを使ってる方向け)以前のJasperは良くない設計や実装があり、そのせいでいくつか不満点がありました。僕自身も不満だったものの、改善するのが難しかったのですが、v1.0.0ではめでたく改善することができました🎉クリックや読み込みの反応速度アップPRのマージ・クローズを正しく表示Streamのスムーズな並び替えissueを自分で更新した場合に通知をしないそれと、今回のバージョンアップで新たにnotificationsとread:orgのスコープが必要になります。Jasperに設定しているGitHubアクセストークンを編集してこれらのスコープを追加してください。🧙‍♂ v1.0.0での新機能v1.0.0では大小様々な新機能を開発したのですが、特におすすめ（と言う名の話したいもの）を紹介します！デザインmacOS Big SurからUIパーツの見た目がけっこう変わるということなので、それを参考にリデザインしてみました。テーマは明るく親しみやすい感じ。素人デザインですが、個人的には割とよくできたなと満足してます。issueの表示issueリストにはラベルやauthorなどの情報を表示しています。v1.0.0ではそれらに加えてプロジェクト名やレビュー状況なども表示するようにしました。特にレビュー状況は誰がapprove、changes requestedしてるかがぱっとわかり便利になりました。検索/Jump NavigationJump Navigationを使うとJasper内のissueを検索したりStreamやリポジトリに移動したりなどができます。検索にはクエリ（is:openなど）を使うこともできます。つまりSlackの⌘ + Kのような機能です。GitHub Projects連携GitHub Projectのカンバンと連携できるようになりました。未読既読をカンバンに反映させたり、カンバンでissueを選択したらJasperで表示するようになりました。ダークモード以前のバージョンでは任意のcssを読み込めるユーザテーマ機能でダークモードを実現していたのですが、v1.0.0からは組み込みでダークモードに対応しました（ユーザテーマ機能は廃止）。スマホとの併用これまでスマホやJasper外のブラウザでissueを見ても、Jasperでは既読になりませんでした。v1.0.0ではGithub Notificationsとシンクすることで、既読を反映できるようになりました。これでスマホとの併用もだいぶ実用的になったかと思います。📖 HandbookJasperには今回紹介した以外にも様々な機能があります。そのためJasper Handbookというドキュメントを作成しました。用途に応じて参照してもらえると嬉しいです。試しに使ってみたい →「クイックスタート」自分にあった使い方を知りたい →「ユースケース」細かいところまで使いこなしたい →「リファレンス」もしJasperを誰かに紹介してくださる場合は「クイックスタート」も一緒に紹介してほしいです🙏💻 技術的な話も書こうかと思ったんですが、長くなってきたので、またそのうち別記事にします。Electronアプリの高速化や、ダークモード対応、UIなどについて書く予定です。というわけで、Jasper v1.0.0の紹介でした。興味を持った方は是非お試しください〜。jasperapp.ioGitHubのスターもお待ちしております！","link":"https://blog.h13i32maru.jp/entry/2020/10/05/172043","isoDate":"2020-10-05T08:20:43.000Z","dateMiliSeconds":1601886043000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"Jasper v0.9.1をリリースしました","contentSnippet":"こんにちは丸山@h13i32maruです。GitHub用のIssue/PRリーダーとして開発しているJasperのv0.9.1をリリースしました🎉今回は軽微なバグ修正/機能改善がメインです。コンメントミニマップにスクロール位置を表示outdatedなレビューコメントのハイライト処理を修正（主にGHEへの対応）URLバーをクリクックしたら選択状態にするそれと実験的な機能として「任意のcookieを指定できる」機能を追加しました。cookieはGitHubへのAPIリクエストとウェブブラウジングに付与されます。使いどころとしては「社外から社内のGHEへのアクセスでは何かしらの認証情報をcookieにのせる」みたいな用途を想定しています。かなり限定された用途ですが、僕はこの機能があると少し楽になることがあるので、試しに作ってみました。ちなみにドメインは利用先のGitHubホスト固定、secure有効、httpOnly有効、SameSite=None固定となっています。SameSiteはLaxを使いたいけど、Jasper上でGitHubのユーザアイコンを表示してる都合上難しそうです。。実験的な機能なので、もしかしたらそのうちなくなるかもしれません。次はパフォーマンス改善をしたいのですが、その前に内部のリファクタリングをしなければならないです。なので、しばらくは機能改善を行えないかもですが、ぼちぼちやっていきます💪","link":"https://blog.h13i32maru.jp/entry/2020/07/05/181749","isoDate":"2020-07-05T09:17:49.000Z","dateMiliSeconds":1593940669000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"自分が使って幸せになるものを作る","contentSnippet":"未来の自分へ、当時考えていた事を残しておく。2018年,2019年は10人程の部に所属していた。その部署はユーザ投稿に責任を持つ部署だった。部署の役割はそのユーザ投稿を伸ばすこと。僕はそこで部長という役割を任されていた。メンバーと一緒にユーザ自身もまだ気づいてないけど、ユーザが求めるものを見つける旅をする。インタビュー、プロトタイプ、テスト、議論を繰り返したし、デザインスプリントもたくさん回した。最高のメンバーと楽しくもあり大変でもある旅ができた。でも今年は部長という役割を降りることにした。同時に社内の組織変更（これはよくある）も行われて、今は30人ぐらいの部署に所属している。ただし部署の役割は大きく変わったわけではない。なんで降りたかいくつか理由はあるけど、一番は「ものづくり」がしたいから。いや当時もものづくりはしていた。でも僕のものづくりは「自分が使って幸せになるもの」というのが暗黙的に含まれてることに改めてきづかされた。思い返せばいつだって自分が使うものを作るときが一番楽しかったのだ。僕は誰かのためにものを作り、そして誰かが幸せになる。ということに残念ながらあまり情熱をもてない。あくまでも第一義的には「自分が使って幸せになる」だ。ものづくりをしている人の中には誰かのために情熱を持てる人もいて、素直にすごいなと思う。でも、僕はこの2年間でそうはなれなかった。自分の情熱は狭い。奥さんや子供が幸せになることはその情熱の中心に入るけど。そんなわけで、正解もわからないし、終わりがあるのかもわからない旅を、こんな気持で続けていくのは難しい。実際、2019年末に自分自身で疲れてるのを実感していた。会社で雇われてる身としてはこの考えは完全にあまいというのは理解しているし、プロダクト開発に関わるものとしては失格かなとも思う。でもなんとか折り合いを付ける必要がある。そこで部長という役割をおりて（降ろしてもらい）、エンジニアとして会社に貢献することにした。もちろんプロダクトのことを何も考えず、ただひたすらコードを書く人になるわけじゃない。どこに主軸を置くかの話である。一方で「ものづくりがしたい」はどうやって叶えるのか。それは主にプライベートでやっていくことにした。と言っても今までもやっていたことを続けていくだけなのであまりかわらない気もする。以前よりもう少し力をいれるようになるのかな。仕事ではエンジニアとして貢献し、給与と技術力を磨く機会を得て、プライベートでは自分が使って幸せになれるものをつくる。それが現時点での僕の落とし所だ。部長という役割をお願いされたとき、3年は続けてみようと思っていた。なので逃げてしまった罪悪感みたいなものが頭の中を漂う。でも2年間走りきったというのも確かだ。そう思って気持ちを切り替える。ちなみに降りた他の理由は「やっぱりエンジニア職は楽しい」「エンジニアリングとマーケティング（広義）の二足を履くのは超高難易度」「マーケティングの道は行き残れる人数が少ない」というのを感じたから。結婚して数年、子供もうまれて自分の価値観が変わりつつあるのを感じる。だから数年後には違うことを言ってるかもしれない。それはその時また落とし所をみつけてやっていく。育休が終わり明日からエンジニア復帰だ。仕事でプロダクションレベルのコードを書くのは数年ぶり。うまくやっていけるといいな。","link":"https://blog.h13i32maru.jp/entry/2020/06/30/155452","isoDate":"2020-06-30T06:54:52.000Z","dateMiliSeconds":1593500092000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"Jasper v0.9.0をリリースしました","contentSnippet":"こんにちは丸山@h13i32maruです。GitHub用のIssue/PRリーダーとして開発しているJasperのv0.9.0をリリースしました🎉新着コメントのミニマップ今回の目玉アップデートは新着コメントのミニマップ機能です。新着コメントの位置を左のバーで視覚的にわかるようにしました(こういうのもミニマップと呼ぶかは分からないんですが、とりあえずそう呼んでます)。issueをスクロールして新着コメントが画面内に表示されればマークも消えていきます。逆にマークをクリックすれば当該の新着コメントの位置へスクロールします。Jasperの未読コメントのミニマップ機能、めっちゃいい感じになった。コメントが画面内に表示されたら連動して緑のマークも既読になる。マークをクリックすれば当該のコメントにスクロールする。 pic.twitter.com/kKAB3mJ5rG— Ryo Maruyama (@h13i32maru) June 26, 2020 実装自体は愚直に要素の位置や高さを取得して、ミニマップを作るための計算をしています。コメントが画面内に入ったかどうかはIntersectionObseverを使っています。便利。その他のアップデートJasper内でコメントを書いたときに、自分の変更による更新通知がされないようになりましたこれまでも実装はしていたけど、いまいち不安定だったのを改善StreamsとIssuesのリスト領域をリサイズできるようになりましたウィンドウの位置とサイズを保持して、前回と同じ位置/サイズで起動するようになりましたSQLiteのVacuumを実行できるようになりましたIssue/PRの説明文の更新diffが表示されなくなっていたのを修正しました全ての更新内容はこちらです。https://github.com/jasperapp/jasper/blob/master/CHANGELOG.md#090-20200627と言う訳で、なんとなくリリースブログを書こうかなと思って、今回試しに書いてみました。余力があれば今後も続けてみます。それとまだJasperを使ったことがない人はぜひお試しください🙏合わせてこちらもどうぞ〜","link":"https://blog.h13i32maru.jp/entry/2020/06/27/191050","isoDate":"2020-06-27T10:10:50.000Z","dateMiliSeconds":1593252650000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"食卓を楽しくするサービス「食卓ラボ」をリリースしました！","contentSnippet":"こんにちは丸山@h13i32maruです。昨日、食卓ラボというサービスをリリースしました！食卓ラボは僕の「一人だと料理する気がおきない。でも家族に作るのはやる気が出るし、一緒に食べるのは楽しい。だったら一緒に囲む食卓をもっと楽しくしたい 。インスタやTwitterのように外を楽しくするサービスじゃなくて、内（家）を楽しくするサービスが欲しい」という思いから作りました。 食卓  ラボ  ノート       なので、食卓ラボは自分のために作ったサービスですが、せっかくなら色んな人にも使ってもらいたいと思っています。そこで、リリースのお知らせを兼ねた紹介記事を書いてみました。気になった方は是非続きを読んでみてください。「使い方」「作った背景」「SNSとの違い」という順で紹介していきます。使い方「食卓・ラボ・ノート」食卓ラボを一言でいうと「食卓を囲む人たちと、食卓の感想やメモを一緒に書いていくサービス」です。そしてこのサービスでは「食卓・ラボ・ノート」というものが登場します。用語が少し混乱するかもしれないので、簡単な図を書いてみました。これを念頭に置いてもらいつつ、テストに参加してくれたユーザの実例を見ていただこうと思います。食卓食卓ラボでは「食卓」というまとまりでサービスを使っていきます。例えば僕と奥さんは「丸山家」という食卓を作成してサービスを使っています。他のユーザも「菊田家」や「かわむら食堂」など自分たちの食卓を作成しています。つまり「食卓」は「一緒に食卓を囲む人たち（家族・パートナー・シェアハウス仲間・etc）で作るグループアカウント」のようなものです。 丸山家  菊田家  かわむら食堂       もちろん個人のアカウントは存在するのですが、基本的にはこの「食卓」という単位でサービスを使っていきます。ノートでは具体的に食卓ラボで何をするのかというと、「ノート」という食卓に関する備忘録のようなものを書いていきます。作った料理のこと、買ってきたお惣菜やデリバリーした料理、調理器具や食器のことなど、食卓に関することならなんでも自由です。写真のきれいさは気にせず普段の飾らない写真で大丈夫です。 トマトソースのパスタ  鯖缶詰  焼きおにぎり       そしてノートには同じ食卓の人であれば写真を追加したり、メモを書き込むことができます。つまり共同でノートを作成していけるということです。この共同のノートが食卓を楽しくしていきます。 僕と僕の奥さんがメモを書いている様子   次はノートのまとめ場所である「ラボ」についてです。ラボ僕はカレーが好きで、奥さんはパン屋が好きだったりと、同じ食卓を囲んでいても好みや関心が違うのは普通です。でもそうすると、食卓に色んな種類のノートが溢れて散らかってしまします。そこで、このサービスでは「ラボ」ごとにノートを書き溜めていきます。例えばテストユーザの方は「餃子ラボ」「缶詰ラボ」「休日のごはんラボ」などを作っています。 餃子ラボ  缶詰ラボ  休日のごはんラボ       ちょっと変わった使い方として「ネタ帳ラボ」や「気になるレシピラボ」として、今度作りたいレシピのURLなどをストックするというのも見かけます。他にも「器ラボ」というのも良いですね。 ネタ帳ラボ  気になるレシピラボ  器ラボ       食卓ラボではまず自分の食卓に好きなラボを作って、そのラボにノートをためていく。ラボごとにノートをためていくので見返すのも便利。というのが基本的な使い方になります。ブックマークやフォロー他の食卓の気になるノートを見つけたら、それをブックマークすることができます。ブックマークすると同じ食卓の人に共有されます。例えば僕がブックマークしたものは奥さんも見ることができます。同様に、好きなラボを見つけたら、そのラボをフォローして食卓内で共有することができます。 ブックマーク  フォローしているラボ  フォローしているラボのノート       食卓ではなくラボをフォローすることによって、「この食卓の○○は興味あるのでみたいけど、☓☓は見なくてもいいかな」ということができます。これはノートを書く人にとっては「見たい人だけが見ているから、気兼ねなくノートを書ける」という効果があります。サービスの使い方紹介は以上です。ここからは食卓ラボを作った背景や一般的なSNSとの違いを紹介します。作った背景「スマホに料理写真が溜まっている」冒頭でも書いたとおり、僕は食卓を楽しくしたいという気持ちを持っていたのですが、どうすれば楽しくできるか分かりませんでした。少し話は変わるのですが、僕や奥さんは料理を作ったり、美味しそうなお惣菜やお弁当を買うのが結構好きです。そして、それらの写真を撮ることも多いのですが、インスタやTwitterに載せることはあまりしません。なぜ載せないのかというと、同僚や友人に特段見せたいわけではないし、すごくきれいな写真というわけでもないからです。そうするとどこにも行き場がない料理やご飯の写真がスマホに溜まっていきます。そこで、この写真たちを使って、我が家の食卓を楽しくできるんじゃないかと思って食卓ラボの構想がうまれました。食卓に関する写真やメモを一緒にためていく→それがきっかけとなり食卓でのコミュニケーションが増える→また食卓ラボを使う。というようなサイクルを作れそうだなと。ポイントはあくまでも実際の食卓でのコミュニケーションを楽しくする補完的なものだということです。SNSとの違い「外で楽しく・内で楽しく」ここまで読んでくれた方の中には「これってインスタやTwitterで共同アカウントつくればいいのでは？」と思った方もいらっしゃるでしょう。結論から言うとそれでは難しいです。なぜなら一般的なSNSは色んな人とのコミュニケーションを楽しむことを目的に作られています。つまり外で楽しく。もちろん一般的なSNSの目的はそれだけではないと思いますが、やはりメインは外でしょう。一方で僕がやりたいことは一緒に食卓を囲む人たちとのコミュニケーションを楽しむことです。つまり内(家)で楽しく。 インスタグラム外で楽しく  食卓ラボ内で楽しく     これはどちらが良い悪いという話ではなく、目的が違うものを無理やり使っても楽しくならないということです。そこで食卓ラボでは内を楽しくすることを中心にサービスを設計しています。例えば、ホーム画面は自分の食卓のコンテンツだけが表示されるハッシュタグという全ユーザ共通のものではなく、各食卓で独立したラボを提供コメントやいいねによるコミュニケーション機能は提供しない他の人からフォローなどをされても通知は飛んでこず、同じ食卓の人のアクションのみ通知が飛んでくるなどなど。こんな感じで外ではなく内が楽しくなるようにサービスを作っています。もちろん他の食卓との関わりが全く無いのは寂しいですし、上手に扱えば自分たちの食卓を楽しくする要素にもなります。なので、そこのバランスを考えながら今後もサービスを改善していきます。以上がサービスの紹介になります。少し長いブログになってしまいましたが、最後までお読みいただきありがとうございました。 食卓ラボに興味を持たれた方はぜひ使ってみてください。何か気になることがあればこの後に載せているFAQもご覧ください。FAQ一人で使っても良いですか？はい、使っていただいて問題ありません。ですが、食卓ラボはあくまでも複数人で使うことを考えて作っているので、不便や不満があるかもしれませんがご了承ください。コメントのやり取りはできますか？同じ食卓の人とも、違う食卓の人とも、コメントのやり取りをする機能はありません。同じ食卓の人であればノートに「メモ」を追記することはできますが、これはあくまでもメモでありコメントではありません。料理レシピは書けますか？料理レシピに特化した機能はありませんが、「ノートの詳細」という機能があります。少し凝った見た目のテキストを書くことができます。詳しくはアプリの中のヘルプをお読みください。 肉味噌炒め  海南鶏飯  ハンバーグ       鍵（非公開）機能はありますか？鍵機能はありません。内を楽しくするのが一番の目的ですが、他の食卓を見たり・他の食卓から見られたりというのをうまく取り入れれば、家の食卓を楽しくするのに役立つと思っています。パソコンから使えますか？今の所iPhoneアプリ、Androidアプリのみの提供となっております。パソコン用のアプリを開発するかは検討中です。無料ですか？はい、無料です。有料機能や広告表示などは今後可能性がありますが、現在のところは無料です。。今後、どんな機能が追加されますか？まだ決定したものはありませんが「ノート詳細のリクエスト」や「ラボの製本化」などを考えています。特に製本化は面白そうなのでやってみたいのですが、さすがに個人開発では難しそうです。ご興味がある企業の方がいらっしゃればお声がけください😀感想やフィードバックはどうしたらよいですか？メールや@h13i32maruにメンション/DMをいただけると嬉しいです。もちろんTwitterでつぶやいてもらったりするだけでも嬉しいです。ブログなどを書いてもらえたら最高に幸せです。あなたは誰ですか？丸山@h13i32maruといいます。サービスやプロダクトを作るのが好きなソフトウェアエンジニアです。Trickle、Jasper、ESDocなどを作ってきました。食卓ラボはTrickleに大きく影響を受けています。ホムペはhttps://h13i32maru.jpです。","link":"https://blog.h13i32maru.jp/entry/2020/06/23/090000","isoDate":"2020-06-22T23:58:24.000Z","dateMiliSeconds":1592870304000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"気兼ねなくアクティビティを書き留められるTrickleというサービスをリリースしました（11ヶ月ぶり2回目）","contentSnippet":"こんにちは丸山@h13i32maruです。現在、Trickleという「気兼ねなくアクティビティを書き留められるサービス」を開発しています。去年の11月にiOS/Android用のスマホアプリをリリースしたのですが、今回Windows/Mac用のデスクトップアプリをリリースしました🎉（11ヶ月ぶり2回目のリリース）Trickle - Write down your favorite activities without hesitationというわけで、今回あらためてTrickleを紹介します！以前見かけて気になっていた人、使ってみたけど離脱しちゃった人、全然知らないけど偶然この記事にたどり着いた人、これをきっかけにちょっと試してみませんか！？トピック & サブスクライブTrickleとは自分の好きなアクティビティ(活動)について気兼ねなく書き留めるサービスです。気兼ねなくと書いたのは、このサービスはクローズドなアプリではなく、オープンなサービスだからです。サービスにログインすれば誰でも他の人が書いたアクティビティを見ることができます。でも、気兼ねなく書きたいのならクローズドのほうが良くない？という疑問をもたれるのは当然だと思います。これは僕の考えですが、オープン(=人の目)であることは良い影響をもたらす面があると考えています。例えば文章の書き方や内容を意識する、他者から影響を受けて活動を始める/続ける、活動についてコミュニケーションをとる、などなど。でもオープンであることは上手に使わないと良くない影響（書きづらくなる、居づらくなる、など）がでてきます。そこでTrickleではトピックという機能を中心に、オープンでありつつも気兼ねなく書き留められることを実現しています。トピックというのはユーザが自由に作れるアクティビティのカテゴリみたいなものです。このトピックはいわゆるハッシュタグとは違い、各ユーザ固有のものとなります（Aさんの読書トピックと、Bさんの読書トピックは独立してる）。Trickleではこの自分で作ったトピックごとにアクティビティを書き込んでいくことになります。こんな感じで、みんな自分の好きなトピックを思い思いに作っています。そして、他の人の感心があるトピックを自由にサブスクライブ(フォローのようなもの)することができます。こうすることで「Aさんのゲームトピックには興味ないけど、読書トピックには興味あるのでそれだけサブスクライブする」ということができます。これは裏を返すと自分のトピックは見られることがあるけど、それは本当にそのトピックに興味がある人しか見てないということです。よって「見てる人の気持ちを考慮しながら書くか書かないか考える」という煩わしさを無くし、気兼ねなく書けるという構造を作り出しています。それとトピックには自分が作ったトピック以外のことを書くのを抑止する効果があります。結果としてTrickleには自分の好きなものだけが集まる構造になります。ただし、「つぶやき」「雑記」みたいなトピックを作るとそれを崩すことも可能です。このあたりはユーザに委ねている部分です。リンク気兼ねなくを実現するための他のポイントとして、Trickleには一般的なSNSにある、コメントやいいね、リプライなどはありません。じゃあコミュニケーションとれないの？と思われるかもしれませんが、Trickleにはリンクという機能があり、使い方次第でコミュニケーションを可能にします。リンクという機能は「自分のアクティビティに他の誰かのアクティビティを紐付けて書くことができる」というものです。Twitterの引用RTに近い形です。このリンクとトピックを合わせることで、自分にあったコミュニケーションの方法をとることができます。例えば「Like」というトピックを作って他の人のアクティビティをリンクしていけば、イイねになります。「返信」というトピックを作ればリプライに、「ブックマーク」というトピックを作ればお気に入りに。そして、このリンクという機能はサービス内では拡散されづらい構造になっています。なぜかというと、その「Like」や「返信」などのトピックをサブスクライブしている人にしか伝搬しないからです。そして「返信」などの双方向のコミュニケーションがヘビーになりづらい機能でもあります。結果として、一般的なSNSよりも抑え気味なコミュニケーションになるので、気兼ねなくというのをサポートしています。もちろんこのリンクは自分のアクティビティを紐付ける事もできるので、コミュニケーション以外にも使えます。僕は目次のような使い方をしていますし、ユーザによってはリンク機能をハックして独自の使い方を編み出している人もいます。全体像という感じで、Trickleではトピックを中心にして、他の機能を連携させることで、オープンなのに気兼ねなく書き留められるサービスとして設計しています。Trickleは自分のアクティビティを書き留めていくことがメインで、おまけとしてコミュニケーション要素があります。一般的なSNSは真逆で色々な人とのコミュニケーションがメインです。なのでSNSを「自分の記録」として使おうとすると色々ストレスになります。もしSNSを自分の記録としても使っているようでしたら、ぜひTrickleを試してみてください！（そういえばTwitterもトピック機能を考えていたり、インスタグラムもいいね数を見えなくするなど、色々検討してるみたい）。実際のユーザ視点での感想は見つけた範囲でここにまとめています。気になる方は見てみてください。デスクトップ版そんなTrickleですが、スマホ版に加えてデスクトップ版（Windows/Mac）をリリースしました！なぜデスクトップ版を作ったかというと、長文やパソコンでの活動について簡単に書き留められるようにするためです。ユーザの使い方を見ていると、パソコンからスマホに画像を転送してからTrickleに書き込んだり、スマホにキーボードを付けて長文を書き込んだりというのをちらほらみかけました。僕自身もパソコンでの作業中にTrickleに書きたいなーと思うことがしばしばありました(余談ですがTrickleデスクトップ版を開発するのに、開発中のデスクトップ版を使いつつ、開発のアクティビティを書き留めていきました。セルフホスト感があって大変楽しかったです)。そういう経緯から、デスクトップ版は書くことに特化させています。なので、他の人のトピックを見たり検索したりというのには対応していません。将来的には作るかもしれませんが、そうなったとしても書くことがデスクトップ版での最優先事項として設計するつもりです。それとデスクトップ版では新規アカウント作成には対応していないので、まずはスマホ版でアカウントを作り、Trickleの雰囲気を理解してからデスクトップ版を使ってもらうことをおすすめしています。というわけで、デスクトップ版による11ヶ月ぶり2回目のリリースでした。好みが分かれるサービスだと思うのですが、少しでも興味を持った方はぜひ試してみてください！Twitterやインスタグラムを何かの活動記録に使っていたり、Slackなどで記録用の分報をしてる人に相性いいと思います。そしてTrickleについてブログを書いてくれたり、ツイートしてくれると嬉しいです。そのときは#trickleappmeをつけてくださいー！https://trickleapp.me","link":"https://blog.h13i32maru.jp/entry/2019/10/05/181449","isoDate":"2019-10-05T09:14:49.000Z","dateMiliSeconds":1570266889000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"Jasper(GitHub用issue reader) v0.8.0をリリースしました","contentSnippet":"GitHub用issue readerのJasper v0.8.0をリリースしました🎉今回は、v0.8.0で改善したことや、今後考えてる機能を簡単に紹介していきます。Jasperについて詳しくはこちらとかこちらの記事をみていただけると。https://jasperapp.io/ https://github.com/jasperapp/jasperTypeScript化v0.8.0でTypeScript化しました。Jasperの機能的には特に変化がないのですが、開発するにはすごくいい感じになりました。もともとずっと生JavaScriptを書いていたのと、保守的な性格なので「WebStormが頑張ってくれるから、生JavaScriptで十分」と思ってたんですが、仕事でTypeScriptを書く機会があり、「これはいい！」と改心しました。TypeScript最高！React + TypeScript + WebStorm最高！(VSCodeを使ってないのは昔からWebStormで書いてるので)TypeScript導入時に参考にしたのはgfxさんの「TypeScript再入門 ― 「がんばらないTypeScript」で、JavaScriptを“柔らかい”静的型付き言語に」です。そう、頑張らなくていいんですよ。漸進的にやっていけば。今回はとりあえずコンパイラを通すことを目標にTypeScript化しました。それだけでも不具合を数個みつけることができました。次はReactのstate, propsに型をつけていこうと思います。ちなみにimportを使いたいだけで入れていたbabelをやめて、開発への恩恵もあるTypeScriptにできたのもよかったです。ElectronのアップデートElectronをv6にアップデートしました。GitHubのissueはJasper内のBrowserView(いわゆるWebView)で表示しているんですが、Electronをアップデートしたおかげでその表示速度が若干向上しました。それと外部ディスプレイをつないだときやスリープから復帰したときに画面がホワイトアウトする不具合があったんですが、これも修正されました。あと、すごく細かいですが、右クリックが非同期化されてレンダリングプロセスを止めなくなったのでそこの使い心地も改善されています。という感じで、Electronのアップデートで色々改善されました。いつもElectronのアップデートPRを送ってくれるwatson1978さんありがとうございます！ちなみにApple Notarization Serviceに対応したのでMacOS Catalinaでも大丈夫！修正/変更以前から、コメント入力時にJasperのショートカットキーが誤作動する不具合があったんですが、今回修正されました。直そう直そうと思っていたんですが、PRをもらったのでそれを取り込みつつ、少し手を加えて修正完了しました。これで知らず識らずのうちにissueをアーカイブして見失わなくてすみます。やったー！他にもローカルへのissue保存件数がmaxになったときに未読件数がバグる問題をなおしたり、Chrome DevToolsをメニューから起動できるようにしました。DevToolsが使えるのでオリジナルのテーマ(CSS)を作ってくれると嬉しいなと思います。今後の話複数マシン間での同期機能を考えています。現状でもJasperのデータディレクトリをDropboxで同期したり、Jasperのデータディレクトリを変えるPRをもらったりしているのですが、今考えてるのはJasperからDropbox APIを使ってデータ同期するというものです。それとJasperのモバイルアプリも検討しています。デスクトップ版Jasperと同等の機能を作り込むのはさすがにちょっと厳しいのでどうしようかなーと悩んでいたんですが、前述のDropbox APIを使えば現実的な開発コストで実用レベルのものが作れそうな気がしています（なので複数マシン間での同期機能はDropboxのディレクトリ同期ではなく、Dropbox APIによる同期を考えてる）。実装方法としてはデスクトップ版が「最新100件程度のissueの未読情報」をJSONファイルとしてDropbox API経由でアップロードして、モバイルアプリはそれを表示するというものです。なので、モバイルアプリの位置づけはデスクトップ版の簡易ビューワアプリという感じです。もちろんモバイルで更新された未読/既読の管理はデスクトップ版にも反映させようと思いますが、Streamのポーリングや作成などはとりあえずなくてもある程度は実用できるんじゃないかと。このあたりはいつになるかわからないですが、のんびり待ってもらえると嬉しいです。というわけで、Jasperを使っていただいている方は今後もよろしくおねがいします。使ってない方も、GitHubのissue/PRを追いかけるのが大変という方はぜひ使ってみてください！https://jasperapp.io/ https://github.com/jasperapp/jasper丸山@h13i32maru","link":"https://blog.h13i32maru.jp/entry/2019/09/18/093000","isoDate":"2019-09-18T00:30:00.000Z","dateMiliSeconds":1568766600000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"今年やったことをアピールして一年を締めくくる","contentSnippet":"こんばんは丸山@h13i32maruです。もう2018年も終わりなので、今年やったことを振り返りがてらアピールして（どこに？）一年を終えようと思います。Jasperの開発個人でJasperというGitHub用のIssueリーダーを開発しています。リリース当初の2016年は$12の買い切りで販売していました。なんですが、色々考えた結果、今年の7月に無料&OSSとして公開することにしました。詳細については「Jasper(GitHub用のIssue Reader)を無料にしました」に書きました。今見たらGitHubのスターが963になってる。もうちょっとで1000超え！jasperapp/jasperただ、無料化したあとは別のことをやっていたので、ほとんど進捗を出せていません。Pull Requestして頂いてる方々、すみません🙇 来年がんばります！Trickleの開発これまた個人でTrickleというサービスを開発しています。リリースしたのは今年の11月です。詳細は「気兼ねなくアクティビティを書き留められるTrickleというサービスをリリースしました」としてブログを書きました。このTrickle、開発に取り掛かったのは2017年9月です。そこからたしか1週間くらいで基礎的なところは作り上げて自分で使い始めたと思います。その後に同僚数名にクローズドテストに参加してもらいながら開発をしていきました。ただ、ある程度作って自分で使っているともう満足しちゃって、細かいところの実装やブラッシュアップを放置したまま1年くらいクローズド運用をしていました。でも、流石にそれじゃだめだろうってことで、今年の9月ぐらいに色々細かいところを作り込んで、11月にリリースできた感じです。リリースしたら意外なほど反響があって、その日のうちにAbemaTVに出演させてもらったり、Gigazineに掲載されたりしました。ありがたい😆 これで「エンジニア向けプロダクト(ESDoc)」「サービス開発者向けプロダクト(Jasper)」「非開発者な一般向けプロダクト(Trickle)」の領域にリリースできました。なので、しばらくは個人開発で新しいものを作るのをお休みして、それぞれの改善をする予定です。サポータークレジットJasperやTrickleを使ってくださっている方々から時々「投げ銭したい」という声をいただくことがありました。そう言っていただけるのは大変ありがたかったのですが、ちゃんとした手段を用意できていなかったので、Trickleのリリースと同時に「サポータークレジット」というものをこっそり試験的に販売開始してみました。一口$5から購入することができて、購入すると僕の個人サイトに名前が掲載されるというものです。購入者には実質的なメリットはないので、本当にお気持ちでいただくという感じになっています。ちなみにただの投げ銭にしなかったのは同僚が調べてくれたこちらの記事を参考にしたためです。インタビューForkwellさんのリレーインタビューを受けて、記事にしていただきました。クックパッドの料理好きなエンジニアが個人でもヒットツールを作り続ける理由とは？－ クックパッド 丸山亮 氏こちらは主にエンジニアを対象として紹介形式のリレーインタビューです。こういうインタビューって初めてだったのですごく緊張しましたが、事前に僕のことについて色々調べたりブログを読んできてくれていたので、大変話しやすかったです。ろくろ（古い？）を回す実績も解除できました。マネージャー業2015年あたりから仕事ではあまりコードは書かずに、PdMやPjMというのをしていました。そして2018年はついにマネージャー業(クックパッド株式会社 投稿開発部 部長）というのをすることになりました。会社の基幹事業・プロダクトなので、その話を引き受けるときはすごく悩みましたが、こんな挑戦そうそう無いかなと思って飛び込んでみることにしました。マネージャーの仕事は「会社への利益」「ユーザへの価値」「メンバー(部)の満足度」の三方良しを達成するのが目標だと思って、1年やってみたのですが、想像の100倍くらい難しかったです。というのもこの3つの中心にあるのが「どんなissue/job/インサイトに取り組むか」だと思っているのですが、それを見つけたり構造化することが難しすぎるので、結果として三方で成果を出すのができなかったという感じです。。。「人は無能になるまで出世する」というピーターの法則を感じまくる1年でした。ともあれ、一緒にやってくれた部のメンバーには感謝しかないです。ありがとうございます！読書前述のマネージャー業をやるとなったとき、本当に何をどうして良いのかわからなかったので、今年の前半は色々な本を読みました。主に事業やプロダクトの戦略をどうたてるか？インサイトやジョブをどうやって発見するか？どのように構造化を行うか？メンバーや組織をどうやって運営するか？などについての本です。例えば「ストーリーとしての競争戦略」「USJを劇的に変えた、たった一つの考え方」「ザ・ゴール1&2」「ティール組織」など30冊ほどです。特に「ストーリーとしての競争戦略」は良かったです。アナリシス（分析）の対となるシンセシス（総合）という概念の重要性が学べました。今年の後半はこれらの本で学んだことを仕事で実践するのを意識していました。先達の知恵、本当にありがたいです。これらがなかったら今年は途方にくれていたと思います。Magic: the Gathering中学生時代に少しだけ遊んでいた「マジック・ザ・ギャザリング」というカードゲームに今年復帰して会社の同僚と遊んでいます。復帰のきっかけは家に残していたカードで奥さんと対戦したのがきっかけです。奥さんには半ば無理やりやらせてみたのですが案外楽しんでくれました（とはいえ、自分でデッキを構築するというまではいかなかった）。中学生時代はルールの理解も曖昧だし、プレイングというものは無いし、何よりお金が無かったです。でも今はインターネットもあるしお金もある程度使えるし、ということで大変楽しくやれています。特にデッキを自分で構築してそれを使って同僚とワイワイしながら対戦するのが本当に楽しいですね。できなかったこと僕はマルチタスクというものが本当に苦手で、一つのことに集中したらそれだけしかできなくなります。例えば、Jasperの開発をしているときはそれだけをし続けます。そして一段落ついたらようやく違うことに取り掛かれます。なので、今年は本当はやりたかったけどできなかったことがいくつかあります。ESDocの開発個人でJavaScript用のドキュメンテーションツールを開発しているのですが、今年は進捗だせなかったCodeLunch.fmの再開ソフトウェアエンジニア向けのポッドキャストをやっているのですが、今年こそは再開するぞと思っていたんですが、こちらも進捗だせなかったバドミントン途中ちょっと復帰したのですがなかなか続けられなかったので、運動不足解消のために来年は頑張るもくもくプロダクト(仮)個人でプロダクトやサービスを開発している人たちで、平日朝とか夜に1時間ぐらい集まって、もくもく開発するみたいなのをやりたいなーと思っていたんですが、何も動けなかった来年は新しいことに挑戦するというよりは、ここに挙げたそれぞれのものを改善したり再開していくことに時間を使う予定です。それでは良いお年を〜。","link":"https://blog.h13i32maru.jp/entry/2018/12/31/182206","isoDate":"2018-12-31T09:22:06.000Z","dateMiliSeconds":1546248126000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"気兼ねなくアクティビティを書き留められるTrickleというサービスをリリースしました","contentSnippet":"こんにちは丸山@h13i32maruです。今日、Trickle（読み:トリクル）というサービスをリリースしました！  アクティビティ  トピック  他の人のアクティビティ       Trickleは「Twitterなにか少し疲れてきたなぁ。でもやめたいわけではないし、うーん」と僕が困っていたことを自分で解決するために作ったサービスです。なので自分をターゲットにしたサービスなのですが、せっかくなので多くの人に使ってもらいたい！というわけで、リリースのお知らせを兼ねた紹介記事を書きました。気になった方は是非続きを読んでみてください。まとめ自分のアクティビティをトピックごとに気兼ねなく書き留めることができるジョギング、読書、猫と遊ぶ、などの自分で作ったトピックごとにアクティビティを書き留める他人の興味あるトピックだけをサブスクライブ（いわゆるフォロー）できる「Aさんの読書トピックはサブスクライブして、ゲームトピックには興味ないからサブスクライブしないでおこう」すごく緩やかな交流によって、お互いのちょっとした影響が可視化される（かも）「Aさんが読んだこの本、私も興味あるから読んでみよう」「お、Bさんがあの本読んだぽい。感想聞いてみよう」使い方Trickleは2017年9月からクローズドテストしており、現在数名のユーザが継続利用してくれています。サービスがどんなものか知ってもらうには、実際の使われ方を紹介するのが手っ取り早いと思うので、現在のユーザの使い方を紹介します。(1) トピックごとにアクティビティを書き留める(2) トピックをサブスクライブする(3) アクティビティをリンクする(1) トピックごとにアクティビティを書き留めるh13i32maru （僕のアカウント） ホーム  トピック  Trickle開発トピック      「ホーム」は自分のダッシュボードと書き留めたアクティビティです。「トピック」というのは、自分が興味のあるアクティビティのまとまりです。各ユーザはこれらのトピックを自分の好きなように作成します。僕の場合だと、「Trickle開発」「丸山家」「買い物」などのトピックを作成しています。そして、このトピックごとにアクティビティを書き留めていきます。トピックごとに書き留めるので、あとから見返すときも便利です。アクティビティはこういう画面から書き留めます。まず、トピックを選択して(青枠で囲まれているのが選択されたトピック）、次に、アクティビティの内容についてテキストを書いたり、写真を添付したりして保存します。以降では他のユーザの使い方を紹介します。yohei-kikuta （現在一番のヘビーユーザ） ホーム  トピック  機械学習トピック      morishin （初期から使ってくれているユーザ） ホーム  トピック  ノルくんとフランくんトピック       tsukashio （Trickleのアイコンをデザインしてくれたユーザ） ホーム  トピック  外食トピック      mqt （一風変わった面白いトピックを作成しているユーザ） ホーム  トピック  like / dislikeトピック       みなさん、おもいおもいのトピックを作成していて良いですね〜。(2) トピックをサブスクライブするTrickleでは「人をフォローする」という機能はありません。そのかわり「トピックをサブスクライブする」という機能があります（そういえばインスタも去年末にハッシュタグをフォローする機能が入りましたね）。トピック単位でサブスクライブすることで興味のあるものだけをみることができます。例えば僕はyohei-kikutaさんの「プログラミング」には興味があるのでサブスクライブしていますが、「おでかけ」には興味が無いのでサブスクライブしていません。他にもmorishinさんの「ノルくんとフランくん」、tsukashioさんの「外食」などをサブスクライブしています。これは「僕がサブスクライブしているトピック」に書き留められたアクティビティ一覧です。(3) アクティビティをリンクするここまでで「トピックごとにアクティビティを書き留める」「トピックをサブスクライブする」という使い方を紹介しました。最後はTrickle内でのユーザ同士のコミュニケーションについてです。といってもTrickleには「いいね」も「メンション」も「リプライ」もありません。唯一コミュニケーションを取れるのは「リンク」という機能だけです。リンクは自分のアクティビティに別のアクティビティを関連させるというものです(Twitterの引用RTみたいなもの)。例えば、このアクティビティはyohei-kikutaさんの「カレーを食べた」というアクティビティをリンクしています。リンク機能は非常に簡素でベーシックな機能なので、色々なハックができます。 ブックマークとして使う  いいねとして使う   リプライとして使う       もちろん、リンクしたアクティビティの一覧や、リンクされたアクティビティの一覧なども見れるようになっています。他にもリンクを使った色々なハックが生まれると楽しいなと思っています。Q&Aという感じで、Trickleがどういうふうに使われているのかはざっくり伝わったかと思います。以降では、多分疑問に思われるだろうなというものをQ&A形式で説明しようと思います。Twitterと何が違うの？これはみなさん100%疑問に思うことだと思います。少しまどろっこしいですが、何が違うのかを整理するために、まずTwitterのアプリ紹介文を見てみます。「いま」世界で起きていることを見てみましょう。ニュース速報、エンタメ情報、スポーツ、政治、ビッグイベントなど、さまざまなジャンルの情報が毎日手に入ります。Twitterで話題にならないニュースはありません。現在進行中の出来事を、リアルタイムのコメント付きで追いかけましょう。話題に参加して、現場から直接届けられる動画、ライブ放送、モーメントをチェックしましょう。自分の身近な出来事を共有しましょう。Twitterでは、ステッカー付きの写真、GIF画像、動画を投稿できるだけでなく、Periscopeボタンを使えばライブ放送もできます。あなたの声を簡単に世界に届けられるツール、それがTwitterです。次にTrickleのアプリ紹介文を見てみます。書き留めておくアプリです。アクティビティはトピックというまとまりごとに書き留めることで、あとから振り返るときにも便利です。そして、他の人の興味のあるトピックがあれば、それをサブスクライブしてみましょう。もちろん、あなたのトピックも誰かにサブスクライブされることがあります。これによって、お互いにちょっとした良い影響を及ぼし合うかもしれません。トピックがあれば気兼ねなくアクティビティを書き留められ、他の人の興味のあるアクティビティだけをサブスクライブすることができます。TwitterとTrickleの紹介文を端的にまとめると、違いがはっきりします。Twitter: みんなの発信を見る → 参加 → 自分も発信Trickle: 書き留める → サブスクライブ → 相互の影響Twitterは発信を見るや参加というワードからもわかるように、主体はネットワークです。「自分」はサブ的な要素という構造です。それに対して、Trickleは書き留めるやサブスクライブというワードで表されるように主体は自分です。ネットワークはサブ的な要素という構造です。表面的にはTrickleでできることはTwitterと似ています。ですが、目指す構造（コンセプト）が違います。この目指す構造が違うので、サービス上での体験も細かいところで変わってきます。例えば以下のような違いがあります。Twitterアプリを起動すると、フォローしている人も含めたツイートのタイムラインが表示されるいいねやメンションがあるとプッシュ通知が送られてくるTrickleアプリを起動すると、自分が書き留めたアクティビティが表示される自分のトピックをサブスクライブされたり、アクティビティをリンクされてもプッシュ通知はこない（アプリ内の通知はある）※ ここでまとめたのはあくまでも「Twitterがどのような構造を目指して作られているか」であり、もちろんTwitterを「自分を主体」として使っているユーザもたくさんいると思います。（というか僕の周りはそっちのほうが多い気がする）何故作ったの？僕はTwitterが好きで2007年から利用していますが、2つ困ったことがあります(1) その人のツイートについて、見たいものもあるけど、見たくないものもある例：技術的な話はみたいけど、普段の雑談や愚痴はあまりみたくない(2) これをツイートしたいけど、興味ない人がいたり、マウンティングみたいに思われないだろうか・・・僕はソフトウェア開発に加えて、料理やM:tGなどが趣味なのですが、そういうのをツイートしづらいこれらが悪化すると、見たくないツイートを見せつけられ、他人の事を考えてツイートするようになり、結果として「徐々に自分が削られていく」ことになります。でもそんなに辛いなら、Twitterやめれば？という話なんですが、なかなか踏ん切りも付きませんでした。それと、僕は「記録していく」というのが好きな性格なので、自分の行動や思考を何かしらに書き残したいとも思っており、これがさらに事態をややこしくしています。僕はここから、「自分が主体でありたい、自分への影響をコントロールしたい。でも一人は寂しい」というインサイトにたどり着きました。ただ、インサイトは発見したけど、どうすれば解消できるか分からずもやもやしていたんですが、去年の初めに「トピック」というアイデアを思いつきました。これがあれば僕が困っていたことは解決されるかもしれないと思い、すぐにプロトタイプを作って自分で使ってみることに。そしたら（今のところは）思った通りに使えているので、このたびリリースすることにしました。※ というのは僕個人の動機なので、利用してくれるユーザの動機とは必ずしも一致しないと思います。なのでTrickleに興味があればこの背景は気にせず一度使ってみてほしいです。技術的なところはどうなってるの？サーバサイドはGCPにがっつり乗っかって、Node.js(Express)で書いています。クライアントサイドはReact Nativeを採用しています。なので、サーバサイドもクライアントサイドもどちらもJavaScriptで開発しています。ちなみにGCPがお金結構かかるので辛いなーという気持ち。それと、クライアントアプリはそのうちOSSにしようと思っています。ただ、今はそんなに強い気持ちがないのでクローズドな状態です。フィードバックしたいんだけど？フィードバックはアプリ内からもできますし、Twitterで#trickleappmeでツイートしてもらえると拾いやすいです。あとはGitHubのissueやメールなどでも大歓迎です。ところで、あなた誰？丸山@h13i32maruといいます。サービスやプロダクトを作るのが好きな人です。これまでESDocというJavaScript向けのドキュメンテーションツールや、JasperというGitHub向けのissueリーダーなどを作ってきました。あと、最近は更新が停滞していますがCodeLunch.fmというポッドキャストもやっています（そろそろ復活させたい）。仕事はクックパッドというところで働いています。ここ数年はコードを書くことはあまりなく、プロダクトや部のマネジメントをしています。もうちょっと詳しい話はh13i32maru.jpにまとめてあるので、興味を持ってくれた方は見てみてください。ちょっと長いブログになってしまいましたが、最後までお読みいただきありがとうございました。Trickleに興味を持たれた方はぜひ使ってみてください。感想もお待ちしております。 本当はもっと細かいところも色々考えて作ったんですが、それはまた別の機会にします（ランチにでも誘ってもらえたら、喜んでお話させてもらいます）。最後に、クローズドテストに参加してフィードバックをくださった方々、ありがとうございました！今後もよろしくお願いします🙏","link":"https://blog.h13i32maru.jp/entry/2018/11/12/092904","isoDate":"2018-11-12T00:29:04.000Z","dateMiliSeconds":1541982544000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"Jasper(GitHub用のIssue Reader)を無料にしました","contentSnippet":"こんにちは丸山@h13i32maruです。2年前からJasperというGitHub用のIssue Readerを開発しており、$12で販売しているのですが、v0.6.0から無料で配布することにしました🎉これまでに有料でお買上げいただいた方々、本当にありがとうございました！！！すごく開発の支えになりましたし、購入してもらえたことを日々嬉しく思っていました。今後とも是非Jasperをよろしくお願いします！なぜ無料にするのか？そもそもどうして有料で販売していたのかというと、「自分の作ったものでお金を直接稼ぐってどれくらい難しいんだろうか？」「たくさん購入してもらうために個人でできることって何があるんだろうか？」というのを知りたかったからです。一攫千金とかサラリーマンを辞める、みたいなのは全然考えていませんでした。有料にしていたのはあくまでも現職（プロダクト開発）に活かすためにという感じでした（Jasper自体は自分がすごくほしいプロダクトだったので作りました）。このような理由で有料販売をしていたのですが、2年活動してみて実感したのは「お金を稼ぐのはめちゃくちゃ難しい」「仕事をしながら趣味程度で個人ができることはそんなに多くはない」ということです。というわけで、当初の目的はある程度達成できたので今回無料にすることにしました。繰り返しになりますが、これまで有料でお買い上げ頂いた方々、本当にありがとうございました。それと、どうしようか迷ったのですが、OSSとしてコードも公開することにしました。Jasperのコードは、ElectronもReactも初めて触って2日ほどでがっと実装したものが、今も使われています。なのでひどいところが結構あります。それとテストも当初から仕事でのドックフーディングでカバーしているので、未だにテストコードがありません。これらは今後ぼちぼち改善して行こうかと思っているので、大目に見てやってください🙏フィードバック無料にすると当然、売上を失います。ですが、それ自体は僕はあまり困りません。困るのは「購入してくれた = Jasperを気に入ってくれた」というフィードバックを得られなくなることです。有料販売を体験してから実感したのですが、額にかかわらず、お金を頂いて自分の製品を買ってもらえるというのは、本当に嬉しいフィードバックです。なので、Jasperのことを気に入ってくれた方は何かしらの方法でフィードバックをして頂けると非常に嬉しいです。感想を#jasperappでツイートしていただくとか、jasperapp/jasperにスターをつけていただくとか。ブログ記事を書いていただこうものなら、嬉しすぎて何回も読んでしまいます。見つけられた範囲のブログ記事はこちらにまとめさせていただいております。そしてすでにJasperを気に入って使っていただいている方は、Jasperの宣伝を職場やコミュニティでしてもらえると非常に嬉しいです！これまでは有料だったので同僚や友人に勧めにくかった、会社に導入しづらかったという方も、これを期に是非！取り組みJasperの認知度向上のための取り組みとしては、「お金をあまりかけずにできる範囲で」という感じで以下の様なことを行いました。Webサイト作成 https://jasperapp.io/MacAppStoreとgumroadでの有料バイナリ販売からgumroadでのライセンス販売に変更詳しくはこちら幾つかの会社に無料クーポンを配布Node学園祭2016でLTの実施と無料クーポンを配布 (Thanks @yosuke_furukawa)メルカリ社に「Jasperってどんな感じで使われてるの？」というのを話にいった (Thanks @mhidaka)個人ブログに幾つか記事を書いたhttp://blog.h13i32maru.jp/entry/2016/06/08/090000http://blog.h13i32maru.jp/entry/2016/06/21/201446http://blog.h13i32maru.jp/entry/2016/12/11/184433外部のメディアに幾つか記事をかいたストレスフリーなGitHubのIssue生活Project of the Week: Jasper(Thanks @watilde)競合GitHub用のIssue Readerというのはそこそこプロダクトが作られており、Jasperの競合がいくつかります。ただ、殆どのものがGitHub NotificationやOrg/Repositoryベースのものになっており、JasperのStreamのような独自の概念を持っているものはありません。FaaoというものだけはJasperと同じような機能を採用しています。ちなみにFaaoはリリース時、作者がREADMEでFaao is a GitHub issue client like jasper.というように紹介していました。GitscoutGitscout is a beautiful GitHub Issues experience for macOSDeckHubDesktop client for GitHubBeeGitHub Issues made native. Be happier and more productive.Deck'Deck' is a multi-timeline viewer for GitHub repository events.ShipFast, native, comprehensive issue tracking and code review for GitHubCashewA simple Github Issues macOS clientOctoboxTake back control of your GitHub notificationsFaaoFaao is a GitHub Issue/Pull Request client on Electron/Browser.GitHawkTake back your GitHub notifications.これまに有料でお買上げいただいた方々、本当にありがとうございました！今後は無料になったJasperをよろしくお願いします！ちなみに、売上額なども公開しようかと思ったのですが、ちょっとドキドキしたので今回はやめておきます。そんなに大した額じゃないです。サラリーマンをやめることなんて全くできない感じです。","link":"https://blog.h13i32maru.jp/entry/2018/07/17/083215","isoDate":"2018-07-16T23:32:15.000Z","dateMiliSeconds":1531783935000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"一緒に働いているチームメンバーに評価してもらう","contentSnippet":"昨年から、マネージャーとしての僕を一緒に働いているチームメンバーに評価してもらうというのをはじめました。評価方法は50個ほどの質問項目が書かれたアンケートに1点(No)〜4点(Yes)をつけてもらうというものです。人数は10人くらいです。質問項目の詳細は最後に掲載します。この取組は会社でオフィシャルに実施してるわけではなくて、あくまでも僕が個人的に取り組んでいるものです。何故始めたのか？ここ数年はリーダーやマネージャーという役割をやるようになり、以下のようなことに困っていました。マネージャーが成長するには自分の上司からの評価だけでは不十分一緒に仕事をし、影響を及ぼし合っているのはチームメンバーである評価者と被評価者が非対称の関係になっており、評価する側が偉いみたいになってくるリーダーやマネージャーは上下関係というより役割だと思っているので、そうはなりたくないそういう役割をやったり、年を取ると周りからフィードバックを徐々にもらえなくなってくるまあこれは自分だって、同じ年代の同僚に普段からフィードバックするかと言われるとしないよなぁとそんなときにWORK RULESにマネージャーに対するメンバーからの評価について書かれているのを読みました。これはいい方法だと思い、取り組むことにしました。やり方まずは質問項目を作ります。僕はいくつかの点に気をつけて質問項目を作っていますが、まだまだ改善できるきがします。こういうのを専門に取り扱っている人事系の会社とかも多分あると思います。具体的すぎる質問だとメンバーからのフィードバックの幅が狭くなるかといって抽象的すぎるとどう判断したらいいのかわからなくなるフリーテキストや質問項目自体に対するフィードバックももらえるようにする点数は中間が無いように1〜4とする集計しやすいように点数が大きい方が良いとなるような質問の仕方にする次に質問をメンバーの人に配ります。僕はGoogleフォーム使ってアンケートを作ります。なんですが、次からはGoogle スプレッドシートを個別に配る方法に変える予定です。後述しますが、期待値というものを取り入れるためです。実際に質問に答えてもらったあとは、点数が低かったところについて個別に話を聞かせてもらう場を設けます。つまり匿名ではなく記名してもらうことになります。なので、メンバーとある程度の信頼関係を築けていないと難しいです。信頼関係の話については、現職主催のテックカンファレンスで登壇したときに話をしたので、興味のある人は見てみてください。チームでプロダクト開発をするための取り組み改善僕は「質問項目」に対して「評価値としての点数」をつけてもらいましたが、それに加えて「期待値としての点数」もつけてもらうのが良いと思い始めました。例えばこんな感じです。プロダクトの検証スピードを意識しているか？期待値: 1点〜4点評価値: 1点〜4点こうやって期待値も聞くことで、期待値と評価値のギャップを元に以下のようにアクションをとることができます。期待値が高くて評価値も高い(ギャップがない) → OK評価値が低い(ネガティブギャップ) → 重視して改善する期待値が低くて評価値は高い(ポジティブギャップ) → OK評価値も低い → ギャップはないけど、期待値が低くて良いのか検討する低いとダメだと思うものは、期待値を持ってもらえるようにメンバーと話をするそれと、このアンケートという手法で評価してもらうのは色々なところで使えます。僕はメンバーとの目標設定後に、目標設定自体についてのアンケートを取りました。まとめ僕のような新米マネージャーやマネジメントに片足突っ込んでる人で興味を持った人はやってみると良いと思います。もちろんシニアなマネージャーの方もやってみると何か発見があるかもしれません。ただし、この点数だけをあげようとしてメンバーの方ばかり向いてしまうのは本末転倒です。あくまでも成果と成長を目的とした手段としてこの方法を使うと良いと思います。余談僕の評価には1点や2点がついた項目も多少ありますが*1、「私は丸山を他の社員にもお勧めする」という項目については満点をとれたので(凄く嬉しい)、全体としては大きな問題はない/良い期待値を持ってくれているんだろうなと少し自信が付きました。こうやって自信をもてたことにより、マネジメントという仕事についてブログなどで自分の意見を書くことを過度に恐れることがなくなりました。というのも、僕がマネジメントの自説やら意見などを書いてるのをメンバーが見たときに、実は僕に対して不満があるメンバーがいたときにそれこそ信頼を失ってしまうと思っているからです。とはいえ、マネジメントについて頻繁に何か書きたいかと言われればそんなことはなく、今回のように凄く良い取り組みだなと思うものをたまに書ければ満足かなという感じです。質問項目この質問項目はCC0として公開するので、ご自由にお使いください。xxは には自分自身の名前が入ります。# プロダクトマネジメント- xxはプロダクトの本質的な課題を伝えている- xxはプロダクトの本質的な課題に対する解決策を伝えている- xxはプロダクトの優先順位、やること/やらないことを伝えている- xxはプロダクトを定量的に理解し、伝えている- xxはプロダクトを定性的に理解し、伝えている- xxはプロダクトの検証スピードを意識している- xxはプロダクトの品質向上を意識している- xxはプロダクトに対して長期的な投資を行っている- xxはプロダクトから得られたナレッジを蓄積し共有している- xxが示すプロダクトに納得感を持っている# プロジェクトマネジメント- xxは優先事項である結果/成果物にチームが集中できるようにしている- xxは私/チームに権限や意思決定を移譲している- xxは私/チームに上層部からえた関連情報を定期的に共有している- xxはチームにリソースを十分配分している- xxはスケジュールを適切に設計、管理している- xxは必要なときに自らプロジェクトを進行している- xxが行うプロジェクトマネジメントに納得感を持っている# ピープルマネジメント- xxは私の役割・目標を私に伝えている- xxは私の成果・能力を正しく評価している- xxは良いチーム・組織を作っている- xxは私/チームが成果をあげるための実行可能なフィードバックをしている- xxは私を1人の人間としてみて、敬意・思いやりをもって接している- xxは私と私のキャリア/成長にかかわる有意義な話し合いをしている- xxは私/チームの成功や満足度に関心や気遣いを示している- \"xxは私/チームと円滑にコミュニケーションしている    \"- xxは私のワークライフバランスの管理を阻害していない- xxは職場を楽しく働きやすい環境にしている- 私は責任・やりがいを持って働けている- 私は私の給与に納得感を持っている- xxは私の性格や人間性を理解している- xxはオープンでフランクな態度を示している- 私はチームの一員として一体感をもって仕事をできている- チームメンバーは上下関係ではなく敬意をもって互いに接している- チームの意思決定は迅速で、さまざまな視点が検討されている- 私はxxのピープルマネジメントに納得感を持っている# xx個人の能力- xxは会社の状況を理解している- xxは私/チームにアドバイスできるだけの技術知識を持っている- xxは私/チームにアドバイスできるだけのデザイン知識を持っている- xxは私/チームにアドバイスできるだけのビジネス知識を持っている- xxは部署間連携を適切に行っている- xxはxxの上長と適切に連携している- xxはチームを超えた人たちを巻き込んでい仕事を進めている- xxは早い決断・大きな決断を行っている- xxは自身の能力向上を積極的に行っている- xxは採用活動を積極的に行っている- xxの考え方に違和感を持っているところはない- 私はxxを他の社員にもお勧めする# フリーテキスト- この質問リストは自分で作ったので、追記/修正するとよい質問があれば是非教えて欲しいです。- この他にもフィードバックすべき点があれば是非教えてください。感想/相談/良い点/悪い点/小さいこと/大きいこと/etc何でもOKです。*1:つかないなんてことはないと思う","link":"https://blog.h13i32maru.jp/entry/2018/01/09/085813","isoDate":"2018-01-08T23:58:13.000Z","dateMiliSeconds":1515455893000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"ESDocという(多分)モダンなドキュメンテーションツールの紹介","contentSnippet":"こんにちは丸山@h13i32maruです。僕は2015年からESDoc*1というJavaScript向けのドキュメンテーションツールを開発しています。https://esdoc.orghttps://github.com/esdoc/esdoc Star最初のリリースから2年、昨日ようやくv1.0をリリースできました🎉いやー、ここまで長かったです。今ではRxJSやSketchAPIなど、様々なツールで使用されています。この2年間、ESDocは2つのゴールを目指して開発してきました。ドキュメントの作成・メンテナンスを快適にする（ドキュメントを書くの楽しい！という状態）ソフトウェアの使い方を簡単に理解できるドキュメントを作成する（ソースコード読まなくても大丈夫！という状態）この2つを満たすためにESDocは色々な機能を提供しています。今日はそれらの機能の中でも(多分)モダンで特徴的なものを幾つか紹介します。モダンと書いたのはJS界隈のドキュメンテーションツールの中ではモダンだと思ったからです。他の言語だとどうかはちょっと自信はありませんが・・・ちなみに今回紹介する機能はJavaScript特有ではない機能がほとんどなので、他の言語をメインで使っている開発者の方にも参考になると思います。願わくば、他の言語のドキュメンテーションツールにも同様の機能が入ると良いなと思っています。APIリファレンスソースコード中にDoc Commentと呼ばれる形式のコメントで専用のタグを書くことでクラスやメソッドに対してドキュメントを書きます。そしてESDocではこのコメントを読み取り、HTMLに整形してドキュメント(APIリファレンス)を作成します。このHTMLは見やすさを重視し、気持ちよくドキュメントを見られるようにと意識しています。そしてこれは見る人だけではなくドキュメントを書く人にも良い影響を与えると思っています。ソースコードにコメントを書いておくとこういうHTMLが出力されるESDocが対応しているタグや形式につてはこちらに詳細があります。ちなみにESDoc自身からESDocでドキュメントを生成するとこんな感じになりますドキュメントのカバレッジテストにはテストカバレッジがあります。ソースコードのどれだけをテストしているかというものです。ESDocではこのテストカバレッジと同じように、ドキュメントのカバレッジを測ることができます。つまりソースコードのどれだけにドキュメント(DocComment)が書かれているかを数値化してみることができます。そしてどこにドキュメントが書かれていないかも簡単にわかります。ファイルごとのカバレッジが見れるドキュメントが書かれていない箇所がハイライトされるこれによって、ドキュメントの抜け漏れに気づくことができ、ドキュメントの網羅性を向上させるのに役立ちます。そして、人間、数値が見えると数値を保持・向上させたくなるものです。つまり継続的にドキュメントを書き続けるモチベーションを引き出します。ちなみに、compodocというAngular用のドキュメンテーションツールではESDocにインスパイアされ、カバレッジが実装されたようです。ドキュメントのlintESDocではドキュメント(タグ)とソースコードをチェックして、不正だと思われるものを警告表示します。この警告を見てドキュメントのどこに間違いがあるのか簡単にわかるようになります。これによってドキュメントの間違いに気づくことができ、ドキュメントの正確性を向上させるのに役立ちます。マニュアルの統合ソースコード中に書くドキュメントは所謂APIリファレンスと呼ばれるものを作成するのには便利です。しかし一般的にドキュメントといえば、インストール方法や設定方法、サンプルなどAPIリファレンス以外にも色々な内容が必要です。そこでESDocはマニュアルとして任意のMarkdownファイルを読み込んでAPIリファレンスとともにドキュメントとして出力します。マニュアルのトップページマニュアルの詳細これによってソフトウェアを使うのに必要なドキュメントの要素を含むことができます。テストコードの統合テストコードはフレームワークやライブラリの使い方を理解するのに良い情報源になります。そこで、ESDocではテストコードもドキュメントに含めることができるようになっています。そして単純にテストコードを含めるだけではなく、専用のタグを書くことでテストコードとidentifier(クラスやメソッドなど)を関連付けることができます。例えばParamParserのAPIリファレンスを見ているときに、ParamParserに関連するテストコードをすぐに参照することができます。@test というタグを使ってテストコードとidentifierを関連付ける。クラスのドキュメントにテストコードへのリンクが貼られるテストコードにクラスへのリンクが貼られるちなみにソースコードもドキュメントに統合され、identifierとソースコードは相互に行き来することができます。組み込み検索中規模のライブラリやフレームワークになるとドキュメントをただ参照するというより、機能や使い方を探しながらドキュメントを読むという使い方をすることが多いと思います。そこでESDocでは検索機能が組み込まれており、ドキュメント内のAPIや説明を検索することができます。そして機能はAPI名や説明文だけではなく、ソースコードやテストコードも検索対象としています。ちなみにこの検索機能は非常にナイーブに実装されています。ドキュメント生成時に検索用のインデックスファイルをJSONで作り、検索時にそのJSONから単純な部分文字列検索をしているだけです。今のところパフォーマンスは特に問題なさそうですし、検索対象も自然言語ではないので形態素解析やNgramなどを使わなくてもそこそこ実用できると考えています。型推論(的なもの)メソッドや関数に対してドキュメントを書き忘れてしまうと、APIは存在するのにドキュメント上には書かれないということが起きてしまいます。そんなときにソースコードから分かる情報をもとにドキュメントを自動的に生成できれば、この問題をある程度防ぐことができます。ESDocではメソッド名や引数名から自動的にドキュメントを生成することができます。ですが、JavaScriptは動的型付け言語なので、引数や戻り値の型はソースコードには明示されていません。そこで、簡易的な型推論(と呼ぶには粗末ですが)によって自動的に型をドキュメントに含めることができます。これによって、少なくともドキュメントには漏れがないという網羅性を保証できます。ドキュメントを全く書いてなくてもコードから出来る限りドキュメントを作成するちなみにESDocで実装されている型推論はデフォルト引数やreturnから組み込み型(string, number, boolean, Array)を推論するという非常に簡易的なものです。推論できなかった方は任意の型となります。Plugin ArchitectureESDocでは早い時期からプラグインの仕組みを提供していました。プラグインの仕組みによってドキュメント生成の過程に外から介入し、生成されるドキュメントをカスタマイズすることができます。フックポイントとしては主に以下のタイミングに対応しています。詳細はこちらを参照してください。プラグイン読み込み時設定ファイル読み込み時ソースコード読み込み時ソースコードのパース時AST読み込み時DocComment読み込み時ドキュメント生成時一方、ESDoc自身はこのプラグインの仕組みは使っておらず、モノリシックなコードとして実装されていました。しかしこれでは新しい機能を追加していくのが徐々に大変になってきました。そこで、ESDoc v1.0からはESDoc自身もこのプラグインの仕組みを使い機能を提供するようにしました。これにより、およそ20個ほどのプラグインに機能が切り出されました。プラグインはesdoc/esdoc-pluginsにホストされています。Plugin Architectureになったことにより、ざまざまなメリットが得られました。機能追加を行ってもコードの肥大化を防げる実験的な機能も気軽に提供できるESDoc自身がプラグインの仕組みに依存しているので、プラグインの仕組みを改良するモチベーションを得られるサードパーティのプラグインを作るための生きたサンプルコードになる逆にデメリットとしてはどこで何が行われているのか把握しづらくなったESDocを使う人にとっては手間が増えた特に2つ目のデメリットは影響範囲が広いと思ったので、標準的に使われるプラグインをまとめたesdoc-standard-pluginを提供することで解決しています。言語拡張(proposal, flow, typescript)ESDocはES2015以降を対象にしています。しかしJavaScriptの世界にはまだ検討中の機能であったり、altJSと呼ばれるJSにトランスパイルされる言語があります。そこでESDocではプラグインを使って、これらに対応しています。esdoc-ecmascript-proposal-pluginECMASCript Proposalに対応するためのプラグインです内部的にはbabylon(ESDocが使用しているESパーサ)のオプションを変更してコードをパースするようにしていますesdoc-flow-type-pluginFlowに対応するためのプラグインです内部的にはbabylonのオプションを変更してコードをパースするようにしていますまた型アノテーションからドキュメントを生成するようにもなっています僕がFlowを使っていないということもあり、このプラグインはPoCな状態ですesdoc-typescript-pluginTypeScriptに対応するためのプラグインです内部的にはTSCを使ってJSに変換してからESDocに渡すようにしていますまた型アノテーションからドキュメントを生成するようにもなっています僕がTypeScriptを使っていないということもあり、このプラグインはPoCな状態です※ babylon7ではTSをパースできるようになるので、TSCから乗り換えるかも？ホスティングESDoc自体の機能ではないのですが、ESDocのホスティングサービスをhttps://doc.esdoc.orgで提供しています。GitHubのURLを入力すれば、そこからESDocの設定ファイルを読み取りドキュメントを生成してホスティング上で見れるようになります*2。ホスティングサービスを提供しているのは以下の理由からです。気軽にドキュメントを公開できるようにするため同じ場所で同じようにドキュメントを見られるようにするためドキュメントを検索することで、JavaScriptのパッケージ見つけられるようにするためしかし、僕があまりサーバサイドに強くないことや時間を避けていないせいで中途半端な状態になってしまっています。具体的には以下の点が微妙な状態です。GitHubとの連携がイマイチOAuth連携していないので、任意のリポジトリのドキュメントも作れる（特に害はないが微妙）WebHookに対応していない（ドキュメントを更新するためのAPIは提供している）サンドボックス内でのドキュメント生成になっていないこれにより、任意のプラグインの使用を禁止せざるをえない(権限管理されているとはいえ怖い）Elasticsearchが落ちるメモリが足らなくてちょいちょい落ちる（さくらのVPSにもっとお金を積めば解決しそう）というわけで、もしホスティングサービスの改良・メンテに興味がある人がいればh13i32maru at gmail.comまでご連絡ください。という感じでESDocでは色々な機能を提供しています。これらの機能を実装していく中で、ドキュメントに求められる要素について以下のようなものが必要だと思うようになりました。 要素  具体的な内容  導入  ソフトウェアのインストール方法や環境構築の方法  操作  ソフトウェアの設定方法やコマンドライン・GUIなどの使い方  参照  APIの使い方やその説明(所謂APIリファレンス)  事例  使い方のサンプルやREPL  履歴  ソフトウェアやドキュメントの更新履歴 参照についてはソースコードからAPIリファレンスを作成し、それ以外の要素についてはマニュアル機能でカバーできるようになっています。そして、ドキュメントに求める性質は以下の様なものがあると考えるようになりました。 性質  性質を満たすためにESDocが提供している機能  継続性  良いルック&フィール、ドキュメントのカバレッジ  網羅性  簡単な型推測によるドキュメントの自動生成  検索性  組み込み検索、ホスティングの全文検索  関連性  クラス間の継承関係、ソースコードやテストコードの統合  正確性  ドキュメントのlint このあたりについての詳細は以下を御覧くださいドキュメントの構造化による，良いドキュメントの作成方法ESDoc - ES6時代のドキュメンテーションツール - Node学園祭2015ESDoc - The Good Documentation For JavaScript今後の機能拡張はこれらの性質をより広く・深くカバーするようなものを考えて行く予定です。例えばGitと連携してメソッドの中が大きく変更されているのにドキュメントが変更されていない場合に警告を表示したり(正確性)、マニュアル中のクラス名やメソッド名とAPIリファレンスを相互に関連付けられるようにする(関連性)などを考えています。なのですが、v1.0をリリースしたのでESDocはしばらくお休みして、もう一つ個人で開発しているソフトウェア(Jasper)の方にしばらく時間を使って行こうと思っています。ESDocに興味を持たれた方は是非使ってみてください。REPLのサイトもhttps://try.esdoc.orgで提供しています。今後フレームワークやテストと同じくらいドキュメントについても話題になると良いなと思っています。以上ESDocの紹介でした。*1:他の言語だとJavaDoc、YARD、pydocなどがあります。JavaScript向けだとJSDocやdocumentationjsなどもあります。*2:似たサービスとして、https://inch-ci.org/もあります","link":"https://blog.h13i32maru.jp/entry/2017/07/31/081614","isoDate":"2017-07-30T23:16:14.000Z","dateMiliSeconds":1501456574000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"FlowとTypeScriptをESDocで使用する","contentSnippet":"ESDoc v1.0をリリースするために、機能をプラグイン化してコアと周辺機能を分離しています。https://github.com/esdoc/esdoc-pluginsこの作業は大体終わり、現在はよりadvancedなプラグインのPoCを作成しています。そこで、今回はFlowとTypeScriptをESDocで扱うための2つのプラグインを紹介します。ESDoc v1.0自体ついては正式リリース後に紹介する予定です。FlowをESDocで使用するesdoc-flow-type-pluginFlowで書かれたコードをESDocで使用可能にするプラグインです。このプラグインはPoCなので、実現可能性を確かめるためだけの最小実装となっています。ドキュメントコメントに型情報が書かれていない場合、Flowの型アノテーションから型を取得する型推論による型情報の取得は未実装このプラグインを使用するにはESDoc@alphaが必要です。npm i esdoc@alpha esdoc-standard-plugin esdoc-flow-type-plugin必要な設定を.esdoc.jsonに記述します。{  \"source\": \"./src\",  \"destination\": \"./doc\",  \"plugins\": [    {\"name\": \"esdoc-standard-plugin\"},    {\"name\": \"esdoc-flow-type-plugin\"}  ]}esdocopen doc/index.htmlTypeScriptをESDocで使用するesdoc-typescript-pluginTypeScriptで書かれたコードをESDocで使用可能にするプラグインです。このプラグインはPoCなので、実現可能性を確かめるためだけの最小実装となっています。ドキュメントコメントに型情報が書かれていない場合、TypeScriptの型アノテーションから型を取得する型推論による型情報の取得は未実装このプラグインを使用するにはESDoc@alphaが必要です。npm i esdoc@alpha esdoc-standard-plugin esdoc-typescript-plugin必要な設定を.esdoc.jsonに記述します。{  \"source\": \"./src\",  \"destination\": \"./doc\",  \"plugins\": [    {\"name\": \"esdoc-standard-plugin\"},    {\"name\": \"esdoc-typescript-plugin\"}  ]}esdocopen doc/index.html実装方法Flow基本戦略は「Flowの型情報をドキュメントコメントに埋め込む」というものです。これができれば後はESDocの処理フローに任せることができます。Flowはbabylon(babelで使われているECMAScriptパーサ)でパースし、ASTに含めることが可能です。なので、以下のように型情報をドキュメントコメントに埋め込みました。babylonのflowプラグインを有効にしてFlowコードをパースしてASTにするASTをトラバースし、対象(メソッドや関数)のnodeに対してnodeから型情報を取得「既存のドキュメントコメント」と「型情報」から「新しいドキュメントコメント」を生成nodeのコメントを置き換えるTypeScript基本戦略はFlowと同じで「TypeScriptの型情報をドキュメントコメントに埋め込む」というものです。後はTSをESに変換し、ESDocの処理フローに任せることができます。TypeScriptはbabylonではパースすることができません。※babylonにTSのプラグインを導入するPRは出されているようですそこでTypeScriptコンパイラを使用して、以下のように型情報をドキュメントコメントに埋め込みました。TSコンパイラでコードをパースしてASTにするASTをトラバースし、対象（メソッドや関数）のnodeを集めるnodeの一覧を順番にループさせて、nodeから型情報を取得「既存のドキュメントコメント」と「型情報」から「新しいドキュメントコメント」を生成元のTSコードのドキュメントコメントを置き換える(文字列操作)ドキュメントコメントを置き換えたTSコードをESにトランスパイルする1点泥臭いのは「ドキュメントコメントを書き換えるのに、TSコードを文字列操作する」ことです。TS ASTを書き換えて、新たなTSコードを生成できればよかったのですが、TS ASTを書き換える方法がわかりませんでした。もし知っている方がいれば教えて頂けるとありがたいです。これらのプラグインに興味がある方は是非試用してみてください。僕自身はFlowもTypeScriptも使っていないのでpull requestをお待ちしております。","link":"https://blog.h13i32maru.jp/entry/2017/06/11/182836","isoDate":"2017-06-11T09:28:36.000Z","dateMiliSeconds":1497173316000,"authorName":"h13i32maru","authorId":"h13i32maru"},{"title":"「チームでプロダクト開発するための取り組み」の補足","contentSnippet":"昨日、Cookpad TechConf 2017にて「チームでプロダクト開発するための取り組み」というタイトルで登壇しました。speakerdeck.comwww.youtube.com発表後にTwitterをエゴサーチしてると、評判が良かったようで一安心していました。しかしその評判が想像以上に良くて、ちょっと自分の中でギャップを感じました。で、よくよく考えてみると、一つ前提が抜けていたなと思い、今ブログを書いています。その前提とはチームメンバーはすごく技術力も実装力もあるエキスパート僕などよりも全然高いレベル対象とするプロダクトを現時点で作れるレベルの能力を持っているもしくは作れるレベルのポテンシャルを持っているかつ、自分自身で成長・自走していくことができるというものです。この前提があると何が良いのかを少し説明します。一つ。チームメンバーには作ろうとしているプロダクトを作れるだけの十分な能力があるので、コードの品質やデザインの品質というものに(僕自身は)注意力を向ける必要があまりありません。少なくともプロダクトを本番に投入しユーザに提供したり、検証をすることには全く問題がない、と思います。上を見たらきりは無いのでしょうが、今でも十二分に上の方にあると思っています。また、それだけ能力があるので僕は技術的な制約を忘れて、理想や無茶を遠慮なく言えます。そして僕が言った内容についてより良い解法や現実的な落とし所を教えてもらえるという安心感もあります。二つ。チームメンバーは成長・自走していけるので、どういう方向に成長したいのか相談して、そのためのチャレンジを用意することに注力できます。もし、自分で成長していけない場合、そもそも成長してもらうようにすることに力を割かなければなりません。それは大変労力を必要とします（人に変わってもらうのはものすごくものすごく難しい）。ただし、リスクもあって、チャレンジを用意できなければその人はチームを去っていく可能性もあります。かならずしも、チャレンジだけを求めてるわけでもないとは思うので、ケースバイケースだとは思いますが。幸いにして僕はこの前提がなりたつようなエンジニア・デザイナーと仕事をしています。なので、今回お話した「チームでプロダクト開発するための取り組み」というのは、凄いチームメンバーあってのことでした。一方、この前提が成り立たない場合、僕自身が今と同じパフォーマンスを出すのは難しいだろうなと思っています。つまり僕が今行っているマネジメントはある意味チートという見方もできるかもしれません。とは言え、社内ではこの前提が成り立つ人ばかりです。それは人事・採用チームが頑張ってそういう人たちに入社してもらえるようにアプローチしたり、CTOや各VPなど含め社内の人が良い会社の文化を築き上げているからだと思います。話が脱線気味になりましたが、補足は以上です。あ、それと懇親会などで何人かの方に「取り組むことや優先順位はどうやって決めていますか？」という質問をいただきました。これは話が長くなりそうなのと僕もうまく言語化できる気がしないので、またの機会にします。それでは、この度はCookpad TechConf 2017にご来場いただきありがとうございました。","link":"https://blog.h13i32maru.jp/entry/2017/01/22/214940","isoDate":"2017-01-22T12:49:40.000Z","dateMiliSeconds":1485089380000,"authorName":"h13i32maru","authorId":"h13i32maru"}]},"__N_SSG":true}